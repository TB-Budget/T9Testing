--{{ Т9_Тесты - проект для тестирования проектов, созданных на платформе Т9 (c) ТБ.Бюджет, 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
--}

class inherited СИС2.БазовыйБланкРедактор "Проект программы тестирования", editor ПроектСеанса;

import СИС2 classes Функции;

  inclass private

  stored var ЗаморозитьЗаголовокТаблицы: logical;
  stored var ПоказыватьЗебру: logical;
  type типДействия = (СоздатьЕслиНет, УдалитьЕслиЕсть);

  inobject private

  var фреймРеквизиты: TemplateFrame;
  var фреймСценарий: TemplateFrame;
  var секцСценарийЗаголовокТаблицы: TemplateSection;
  var секцСценарий: TemplateSection;
  var NN: integer[] = $;

--{{ Вспомогательные методы

  proc ЗаморозкаЗаголовкаТаблицы;
    var локГраницаЗаморозки: numeric;
    var r: integer;
    with секцСценарийЗаголовокТаблицы do
      for r = 1 .. RowsCount do
        локГраницаЗаморозки = локГраницаЗаморозки + Row[r].Height;
      od;
    end;
    фреймСценарий.FreezeArea(0, 0, 0, локГраницаЗаморозки);
  end;

  func ЕстьГруппаТестПланов(локПолноеИмяКласса: string; var IndexGroup: integer = 0; var LastIndex: integer = 0; локДействие: типДействия): logical;--{ Проверка того, что в программе тестирования уже сформирована запись для описания группы тестов
    var i, Index, p: integer;
    for i = 1 .. ТестПланПП.Count do
      if (ТестПланПП[i].ПолноеИмяКласса = локПолноеИмяКласса) and (ТестПланПП[i].ТестПланКласса = nil):
        Result = true;
        Break;
      fi;
    od;
    if Result:
      IndexGroup = i;
      if (локДействие = УдалитьЕслиЕсть):--{
        if ЕстьТестКласса(локПолноеИмяКласса, Index, LastIndex):
          for p = Index .. LastIndex do
            ТестПланПП[p].inGroup = false;
          od;
        fi;
        ТестПланПП.Delete(IndexGroup);
        IndexGroup = 0;
        Result = false;
      fi;--}
    else
      if (локДействие = СоздатьЕслиНет):--{
        if ЕстьТестКласса(локПолноеИмяКласса, Index):
          with ТестПланПП.Insert(Index) do
            ПолноеИмяКласса = локПолноеИмяКласса;
            --НаимКласса = локНаимКласса;
            Result = true;
          end;
        fi;
        if ЕстьТестКласса(локПолноеИмяКласса, Index, LastIndex):
          for p = Index .. LastIndex do
            ТестПланПП[p].inGroup = true;
          od;
        fi;
      fi;--}
    fi;
  end;--}

  func ЕстьТестКласса(локПолноеИмяКласса: string; var Index: integer = 0; var LastIndex: integer = 0): logical;--{ Проверка того, что в программе тестирования уже есть тест-план для такого класса
    var i, locIndex1, locIndex2: integer;
    for i = 1 .. ТестПланПП.Count do
      if (ТестПланПП[i].ТестПланКласса.ПолноеИмяКласса = локПолноеИмяКласса) and (ТестПланПП[i].ТестПланКласса <> nil):
        Result = true;
        if (locIndex1 = 0): locIndex1 = i; fi;
        if (locIndex1 > 0): locIndex2 = i; fi;
      fi;
    od;
    Index = locIndex1;
    LastIndex = locIndex2;
  end;--}

  func Позиция_ОписаниеГруппы(vStb: Subtable; locIndex: integer): logical;
    if (vStb <> nil): Return (vStb.ItemsByNumber[locIndex].ТестПланКласса = nil);
    else              Return (ТестПланПП[locIndex].ТестПланКласса = nil);
    fi;
  end;

  func Позиция_ВходитВГруппу(vStb: Subtable; locIndex: integer): logical;
    if (vStb <> nil): Return (vStb.ItemsByNumber[locIndex].ТестПланКласса <> nil) and (vStb.ItemsByNumber[locIndex].inGroup);
    else              Return (ТестПланПП[locIndex].ТестПланКласса <> nil) and (ТестПланПП[locIndex].inGroup);
    fi;
  end;

  func Позиция_ВнеГруппы(vStb: Subtable; locIndex: integer): logical;
    if (vStb <> nil): Return (vStb.ItemsByNumber[locIndex].ТестПланКласса <> nil) and (not vStb.ItemsByNumber[locIndex].inGroup);
    else              Return (ТестПланПП[locIndex].ТестПланКласса <> nil) and (not ТестПланПП[locIndex].inGroup);
    fi;
  end;

  proc ПослеДобавленияПозиции(locCell: TemplateCell);
    if (locCell.Owner.Count > 0):
      locCell.SetFocus;
      ExecuteCommand('Kernel.Move.Down', true);
    fi;
  end;

  proc ДоУдаленияПозиции(locCell: TemplateCell);
    if (locCell.Owner.Count >= locCell.Frame):
      try
      locCell.SetFocus;
      ExecuteCommand('Kernel.Move.Up', false);
      except
      end;
    fi;
  end;

  func ДобавитьТестПлан(locCell: TemplateCell; var ЗаписьТестПлана: Т9_Тесты.ТестПланКласса; ВНачало: logical): integer;
    var p, Index, IndexGroup, LastIndex: integer;
    var aDocId: integer[];
    var locCrd: Тесты.картТестПланКласса;
    var ЕстьГруппа: logical;
    for p = 1 .. ТестПланПП.Count do
      aDocId[p] = ТестПланПП[p].ТестПланКласса.DocId;
    od;
    locCrd = Тесты.картТестПланКласса.Create;
    locCrd.обУсловие_ТипТестПлана = 2; --только НЕ шаблоны
    locCrd.НеИзменятьПростойФильтр = true;
    if CmOk = locCrd.ShowEx(ЗаписьТестПлана, 'not DocId in ' + Str(aDocId), Window.ModalWindow):
      if ЕстьТестКласса(ЗаписьТестПлана.ПолноеИмяКласса, , LastIndex):
        ЕстьГруппа = ЕстьГруппаТестПланов(ЗаписьТестПлана.ПолноеИмяКласса, IndexGroup, LastIndex, СоздатьЕслиНет);
        with ТестПланПП.Insert(LastIndex + 1) do
          ТестПланКласса = ЗаписьТестПлана;
          ПолноеИмяКласса = ЗаписьТестПлана.ПолноеИмяКласса;
          inGroup = ЕстьГруппа;
        end;
        ПослеДобавленияПозиции(locCell);
      else
        if ВНачало:
          with ТестПланПП.Insert(1) do
            ТестПланКласса = ЗаписьТестПлана;
            ПолноеИмяКласса = ЗаписьТестПлана.ПолноеИмяКласса;
          end;
        else
          Index = locCell.Frame;
          with ТестПланПП.Insert(Index + 1) do
            ТестПланКласса = ЗаписьТестПлана;
            ПолноеИмяКласса = ЗаписьТестПлана.ПолноеИмяКласса;
          end;
        fi;
        ПослеДобавленияПозиции(locCell);
      fi;
      Result = CmOk;
    fi;
  end;

  proc УдалитьТестПлан(locCell: TemplateCell);
    var Index, p, pp: integer;
    var локЗаписьТестПлана: Т9_Тесты.ТестПланКласса;
    var локПолноеИмяКласса: string;
    Index = locCell.Frame;
    локЗаписьТестПлана = ТестПланПП[Index].ТестПланКласса;
    if (локЗаписьТестПлана <> nil):
      ДоУдаленияПозиции(locCell);
      ТестПланПП.Delete(Index);
      ЕстьГруппаТестПланов(локЗаписьТестПлана.ПолноеИмяКласса, , , УдалитьЕслиЕсть);
    else
      if CmOk = EnqOkCancel('Из программы тестирования будут удалены все тест-планы класса <' + Библио.ОписаниеКлассаПоИмени(ТестПланПП[Index].ПолноеИмяКласса) + '>. Продолжить?'):
        ДоУдаленияПозиции(locCell);
        локПолноеИмяКласса = ТестПланПП[Index].ПолноеИмяКласса;
        pp = ТестПланПП.Count;
        for p = pp .. 1 step -1 do
          if (ТестПланПП[p].ПолноеИмяКласса = локПолноеИмяКласса):
            ТестПланПП.Delete(p);
          fi;
        od;
      fi;
    fi;

  end;

  proc ПоднятьГруппу(SenderCell: TemplateCell; IndexGroup: integer);
    var локПолноеИмяКласса: string;
    var pp, Index: integer;
    var ПрерватьВыполнение: logical;
    if (IndexGroup > 1):
      локПолноеИмяКласса = ТестПланПП[IndexGroup].ПолноеИмяКласса;
      pp = ТестПланПП.Count;
      Index = IndexGroup;
      while (not ПрерватьВыполнение) do
        SenderCell.Owner.FrameUp(Index);
        Index = Index + 1;
        ПрерватьВыполнение = (Index > pp);
        if not ПрерватьВыполнение:
          ПрерватьВыполнение = (ТестПланПП[Index].ПолноеИмяКласса <> локПолноеИмяКласса);
        fi;
      od;
    fi;
  end;

  proc ОпуститьГруппу(SenderCell: TemplateCell; IndexGroup: integer);
    var локПолноеИмяКласса: string;
    var pp, Index, LastIndex: integer;
    var ПрерватьВыполнение: logical;
    локПолноеИмяКласса = ТестПланПП[IndexGroup].ПолноеИмяКласса;
    pp = ТестПланПП.Count;
    ЕстьТестКласса(ТестПланПП[IndexGroup].ПолноеИмяКласса, , LastIndex);
    if (LastIndex < pp):
      Index = LastIndex;
      while (not ПрерватьВыполнение) do
        SenderCell.Owner.FrameDown(Index);
        Index = Index - 1;
        ПрерватьВыполнение = (Index = 0);
        if (not ПрерватьВыполнение):
          ПрерватьВыполнение = (ТестПланПП[Index].ПолноеИмяКласса <> локПолноеИмяКласса);
        fi;
      od;
    fi;
  end;

  proc ПоднятьТестПлан(locCell: TemplateCell);
    var Index: integer;
    var локПозицииПрограммы: Subtable;
    locCell.SetFocus;
    локПозицииПрограммы = ТестПланПП.CreateSubtableView(locCell.Owner.SubtableFilter, '');
    Index = локПозицииПрограммы.IndexByNumber[locCell.Frame] + 1;
    if (Index > 1):
      if Позиция_ОписаниеГруппы(nil, Index):
        ПоднятьГруппу(locCell, Index);
      else
        if Позиция_ВходитВГруппу(nil, Index) and Позиция_ВходитВГруппу(nil, Index-1):
          locCell.Owner.FrameUp(Index);
        elsif Позиция_ВнеГруппы(nil, Index) and Позиция_ВходитВГруппу(nil, Index-1):
          ЕстьТестКласса(ТестПланПП[Index-1].ПолноеИмяКласса, Index,);
          ОпуститьГруппу(locCell, Index-1);
        elsif Позиция_ВнеГруппы(nil, Index) and not Позиция_ВходитВГруппу(nil, Index-1):
          locCell.Owner.FrameUp(Index);
        fi;
      fi;
    fi;
  end;

  proc ОпуститьТестПлан(locCell: TemplateCell);
    var Index, pp: integer;
    var локПозицииПрограммы: Subtable;
    locCell.SetFocus;
    локПозицииПрограммы = ТестПланПП.CreateSubtableView(locCell.Owner.SubtableFilter, '');
    Index = локПозицииПрограммы.IndexByNumber[locCell.Frame] + 1;
    pp = locCell.Owner.FramesCount;
    if (Index < pp):
      if Позиция_ОписаниеГруппы(nil, Index):
        ОпуститьГруппу(locCell, Index);
      else
        if Позиция_ВходитВГруппу(nil, Index) and Позиция_ВходитВГруппу(nil, Index+1):
          locCell.Owner.FrameDown(Index);
        elsif Позиция_ВнеГруппы(nil, Index) and Позиция_ОписаниеГруппы(nil, Index+1):
          ПоднятьГруппу(locCell, Index+1);
        elsif Позиция_ВнеГруппы(nil, Index) and not Позиция_ОписаниеГруппы(nil, Index+1):
          locCell.Owner.FrameDown(Index);
        fi;
      fi;
    fi;
  end;

  proc ПоказатьТестПлан(locCell: TemplateCell);
    var Index: integer;
    var локЗаписьТестПлана: Т9_Тесты.ТестПланКласса;
    Index = locCell.Frame;
    локЗаписьТестПлана = ТестПланПП[Index].ТестПланКласса;
    if (локЗаписьТестПлана <> nil):
      OpenBlankEditor('Тесты.редТестПланКласса', локЗаписьТестПлана,  Window.ModalWindow);
    else
      Message('Просмотр тест-плана на строке группы невозможен.');
    fi;
  end;
--}}

--{{ Обработчики событий шаблона

  proc шаблон_ПриСчитывании;
    inherited шаблон_ПриСчитывании;
    if ЗаморозитьЗаголовокТаблицы:
      ЗаморозкаЗаголовкаТаблицы;
    fi;
  end;
--}}

--{{ Обработчики событий клеток шаблона

  func Поле_ПриНажатии (Cell: TemplateCell; Action: Template.ClickTypes): Logical;
    var локЗаписьТестПлана: Т9_Тесты.ТестПланКласса;
    --var locCrd: CardForm;
    --var Index, IndexGroup, p, pp, LastIndex: integer;
    --var aDocId: integer[];
    --var локПолноеИмяКласса: string;
    --var ЕстьГруппа: logical;
    if (Cell.Contents = '+') and (Cell.Owner = секцСценарийЗаголовокТаблицы):--добавление тест-плана класса в тест-план из заголовка таблицы
      ДобавитьТестПлан(Cell, локЗаписьТестПлана, true);
    elsif (Cell.Contents = '+') and (Cell.Owner = секцСценарий):--добавление тест-плана класса в тест-план из строки таблицы
      ДобавитьТестПлан(Cell, локЗаписьТестПлана, false);
    elsif (Cell.Contents = 'x') and (Cell.Owner = секцСценарий):--удаление строки из тест-плана (без удаления тест-плана класса из справочника)
      УдалитьТестПлан(Cell);
    elsif (Cell.Contents = '5') and (Cell.Owner = секцСценарий):--перемещение строк вверх
      ПоднятьТестПлан(Cell);
    elsif (Cell.Contents = '6') and (Cell.Owner = секцСценарий):--перемещение строк вниз
      ОпуститьТестПлан(Cell);
    elsif (Cell.Contents = '...') and (Cell.Owner = секцСценарий):--карточка тест-плана класса
      ПоказатьТестПлан(Cell);
    fi;
  end;

  func Поле_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    var Index: Integer;
    var locIsGroup: logical;
    var locDiscription: string;
    Index = Cell.Frame;
    locIsGroup = (ТестПланПП[Index].ТестПланКласса = nil) and (ТестПланПП[Index].ПолноеИмяКласса <> nil);
    locDiscription = Библио.ОписаниеКлассаПоИмени(ТестПланПП[Index].ПолноеИмяКласса);
    locDiscription = if((locDiscription <> nil), locDiscription, 'НЕВЕРНОЕ ИМЯ КЛАССА');
    if (locIsGroup):
      Result = '<b+>' + locDiscription;
    else
      if (ТестПланПП[Index].inGroup) and (ТестПланПП[Index].ТестПланКласса <> nil):
        Result = RepStr(' ', 8) + ТестПланПП[Index].ТестПланКласса.Наим;
      elsif (not ТестПланПП[Index].inGroup):
        Result = locDiscription;
      fi;
    fi;
  end;

  proc Поле_ПриРисованииЭффектЗебры(Cell: TemplateCell; Selected: Logical; var Color: Integer; var FieldColor: Integer; Font: Font);
    var locStyle: TemplateStyle;
    var locColor, locR, locG, locB, newR, newG, newB: Integer;
    var Delta: integer;
    Delta = -40;
    if (Mod(Cell.Frame, 2) = 0): -- это четная позиция
      locStyle = Cell.Style;
      locColor = locStyle.FieldColor;
      SplitColor(locColor, locR, locG, locB);
      newR = if(((locR + Delta) > 0), Min([255, (locR + Delta)]), 0);
      newG = if(((locG + Delta) > 0), Min([255, (locG + Delta)]), 0);
      newB = if(((locB + Delta) > 0), Min([255, (locB + Delta)]), 0);
      locColor = newR + (newG * 256) + (newB * 256 * 256);
      FieldColor = locColor;
    fi;
  end;

  proc Поле_ПриРисовании(Cell: TemplateCell; Selected: Logical; var Color: Integer; var FieldColor: Integer; Font: Font);
    if ПоказыватьЗебру and (Cell.Owner = секцСценарий):
      Поле_ПриРисованииЭффектЗебры(Cell, Selected, Color, FieldColor, Font);
    fi;
  end;
--}}

--{{ Обработчики событий прочих объектов шаблона

  proc флПриИзменении (Sender: CheckBox);
    if not ЗаморозитьЗаголовокТаблицы:
      фреймСценарий.UnFreezeArea;
    else
      ЗаморозкаЗаголовкаТаблицы;
    fi;
  end;
--}}

end