--{{ Т9_Тесты - проект для тестирования проектов, созданных на платформе Т9 (c) ТБ.Бюджет, 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
--}

class inherited СИС2.БазовыйБланкРедактор "Проект программы тестирования", editor ПроектСеанса;

import СИС2 classes Функции;

  inclass private

  stored var ЗаморозитьЗаголовокТаблицы: logical;
  stored var ПоказыватьЗебру: logical;

  inobject private

  var фреймРеквизиты: TemplateFrame;
  var фреймСценарий: TemplateFrame;
  var секцСценарийЗаголовокТаблицы: TemplateSection;
  var секцСценарий: TemplateSection;
  var NN: integer[] = $;

--{{ Вспомогательные методы

  proc ЗаморозкаЗаголовкаТаблицы;
    var локГраницаЗаморозки: numeric;
    var r: integer;
    with секцСценарийЗаголовокТаблицы do
      for r = 1 .. RowsCount do
        локГраницаЗаморозки = локГраницаЗаморозки + Row[r].Height;
      od;
    end;
    фреймСценарий.FreezeArea(0, 0, 0, локГраницаЗаморозки);
  end;
--}}

--{{ Обработчики событий шаблона

  proc шаблон_ПриСчитывании;
    inherited шаблон_ПриСчитывании;
    if ЗаморозитьЗаголовокТаблицы:
      ЗаморозкаЗаголовкаТаблицы;
    fi;
  end;
--}}

--{{ Обработчики событий клеток шаблона
  type типДействия = (СоздатьЕслиНет, УдалитьЕслиЕсть);

  func ЕстьГруппаТестПланов(локПолноеИмяКласса: string; var IndexGroup: integer = 0; var LastIndex: integer = 0; локДействие: типДействия): logical;--{ Проверка того, что в программе тестирования уже сформирована запись для описания группы тестов
    var i, Index, p: integer;
    for i = 1 .. ТестПланПП.Count do
      if (ТестПланПП[i].ПолноеИмяКласса = локПолноеИмяКласса) and (ТестПланПП[i].ТестПланКласса = nil):
        Result = true;
        Break;
      fi;
    od;
    if Result:
      IndexGroup = i;
      if (локДействие = УдалитьЕслиЕсть):--{
        if ЕстьТестКласса(локПолноеИмяКласса, Index, LastIndex):
          for p = Index .. LastIndex do
            ТестПланПП[p].inGroup = false;
          od;
        fi;
        ТестПланПП.Delete(IndexGroup);
        IndexGroup = 0;
        Result = false;
      fi;--}
    else
      if (локДействие = СоздатьЕслиНет):--{
        if ЕстьТестКласса(локПолноеИмяКласса, Index):
          with ТестПланПП.Insert(Index) do
            ПолноеИмяКласса = локПолноеИмяКласса;
            --НаимКласса = локНаимКласса;
            Result = true;
          end;
        fi;
        if ЕстьТестКласса(локПолноеИмяКласса, Index, LastIndex):
          for p = Index .. LastIndex do
            ТестПланПП[p].inGroup = true;
          od;
        fi;
      fi;--}
    fi;
  end;--}

  func ЕстьТестКласса(локПолноеИмяКласса: string; var Index: integer = 0; var LastIndex: integer = 0): logical;--{ Проверка того, что в программе тестирования уже есть тест-план для такого класса
    var i, locIndex1, locIndex2: integer;
    for i = 1 .. ТестПланПП.Count do
      if (ТестПланПП[i].ТестПланКласса.ПолноеИмяКласса = локПолноеИмяКласса) and (ТестПланПП[i].ТестПланКласса <> nil):
        Result = true;
        if (locIndex1 = 0): locIndex1 = i; fi;
        if (locIndex1 > 0): locIndex2 = i; fi;
      fi;
    od;
    Index = locIndex1;
    LastIndex = locIndex2;
  end;--}

  proc ПоднятьГруппу(IndexGroup: integer);
    var локПолноеИмяКласса: string;
    var pp, Index: integer;
    var ПрерватьВыполнение: logical;
    if (IndexGroup > 1):
      локПолноеИмяКласса = ТестПланПП[IndexGroup].ПолноеИмяКласса;
      pp = ТестПланПП.Count;
      Index = IndexGroup;
      while (not ПрерватьВыполнение) do
        секцСценарий.FrameUp(Index);
        Index = Index + 1;
        ПрерватьВыполнение = (Index > pp);
        if not ПрерватьВыполнение:
          ПрерватьВыполнение = (ТестПланПП[Index].ПолноеИмяКласса <> локПолноеИмяКласса);
        fi;
      od;
    fi;
  end;

  proc ОпуститьГруппу(IndexGroup: integer);
    var локПолноеИмяКласса: string;
    var pp, Index, LastIndex: integer;
    var ПрерватьВыполнение: logical;
    локПолноеИмяКласса = ТестПланПП[IndexGroup].ПолноеИмяКласса;
    pp = ТестПланПП.Count;
    ЕстьТестКласса(ТестПланПП[IndexGroup].ПолноеИмяКласса, , LastIndex);
    if (LastIndex < pp):
      Index = LastIndex;
      while (not ПрерватьВыполнение) do
        секцСценарий.FrameDown(Index);
        Index = Index - 1;
        ПрерватьВыполнение = (Index = 0);
        if (not ПрерватьВыполнение):
          ПрерватьВыполнение = (ТестПланПП[Index].ПолноеИмяКласса <> локПолноеИмяКласса);
        fi;
      od;
    fi;
    
  end;

  func Поле_ПриНажатии (Cell: TemplateCell; Action: Template.ClickTypes): Logical;
    var локЗаписьТестПлана: Т9_Тесты.ТестПланКласса;
    var locCrd: CardForm;
    var Index, IndexGroup, p, pp, LastIndex: integer;
    var aDocId: integer[];
    var локПолноеИмяКласса: string;
    var ЕстьГруппа: logical;
    proc ДоУдаления;--{
      if (Cell.Owner.Count >= Cell.Frame):
        try
        Cell.SetFocus;
        ExecuteCommand('Kernel.Move.Up', false);
        except
        end;
      fi;
    end;--}
    proc ПослеДобавления;--{
      if (Cell.Owner.Count > 0):
        Cell.SetFocus;
        ExecuteCommand('Kernel.Move.Down', true);
      fi;
    end;--}
    func Позиция_ОписаниеГруппы(locIndex: integer): logical;--{
      Return (ТестПланПП[locIndex].ТестПланКласса = nil);
    end;--}
    func Позиция_ВходитВГруппу(locIndex: integer): logical;--{
      Return (ТестПланПП[locIndex].ТестПланКласса <> nil) and (ТестПланПП[locIndex].inGroup);
    end;--}
    func Позиция_ВнеГруппы(locIndex: integer): logical;--{
      Return (ТестПланПП[locIndex].ТестПланКласса <> nil) and (not ТестПланПП[locIndex].inGroup);
    end;--}

    if (Cell.Contents = '+') and (Cell.Owner = секцСценарийЗаголовокТаблицы):--{ добавление тест-плана класса в тест-план из заголовка таблицы
      for p = 1 .. ТестПланПП.Count do
        aDocId[p] = ТестПланПП[p].ТестПланКласса.DocId;
      od;
      locCrd = Тесты.картТестПланКласса.Create;
      locCrd.обУсловие_ТипТестПлана = 2; -- только НЕ шаблоны
      locCrd.НеИзменятьПростойФильтр = true;
      if CmOk = locCrd.ShowEx(локЗаписьТестПлана, 'not DocId in ' + Str(aDocId), Window.ModalWindow):
        if ЕстьТестКласса(локЗаписьТестПлана.ПолноеИмяКласса, , LastIndex):
          ЕстьГруппа = ЕстьГруппаТестПланов(локЗаписьТестПлана.ПолноеИмяКласса, IndexGroup, LastIndex, СоздатьЕслиНет);
          with ТестПланПП.Insert(LastIndex + 1) do
            ТестПланКласса = локЗаписьТестПлана;
            ПолноеИмяКласса = локЗаписьТестПлана.ПолноеИмяКласса;
            inGroup = ЕстьГруппа;
          end;
          ПослеДобавления;
        else
          with ТестПланПП.Insert(1) do
            ТестПланКласса = локЗаписьТестПлана;
            ПолноеИмяКласса = локЗаписьТестПлана.ПолноеИмяКласса;
          end;
          ПослеДобавления;
        fi;
      fi;
      --}

    elsif (Cell.Contents = '+') and (Cell.Owner = секцСценарий):--{ добавление тест-плана класса в тест-план из строки таблицы
      Index = Cell.Frame;
      for p = 1 .. ТестПланПП.Count do
        aDocId[p] = ТестПланПП[p].ТестПланКласса.DocId;
      od;
      locCrd = Тесты.картТестПланКласса.Create;
      locCrd.обУсловие_ТипТестПлана = 2; -- только НЕ шаблоны
      locCrd.НеИзменятьПростойФильтр = true;
      if CmOk = locCrd.ShowEx(локЗаписьТестПлана, 'not DocId in ' + Str(aDocId), Window.ModalWindow):
        if ЕстьТестКласса(локЗаписьТестПлана.ПолноеИмяКласса, , LastIndex):
          ЕстьГруппа = ЕстьГруппаТестПланов(локЗаписьТестПлана.ПолноеИмяКласса, IndexGroup, LastIndex, СоздатьЕслиНет);
          with ТестПланПП.Insert(LastIndex + 1) do
            ТестПланКласса = локЗаписьТестПлана;
            ПолноеИмяКласса = локЗаписьТестПлана.ПолноеИмяКласса;
            inGroup = ЕстьГруппа;
          end;
          ПослеДобавления;
        else
          Index = Cell.Frame;
          with ТестПланПП.Insert(Index + 1) do
            ТестПланКласса = локЗаписьТестПлана;
            ПолноеИмяКласса = локЗаписьТестПлана.ПолноеИмяКласса;
          end;
          ПослеДобавления;
        fi;
      fi;
      --}

    elsif (Cell.Contents = 'x') and (Cell.Owner = секцСценарий):--{ удаление строки из тест-плана (без удаления тест-плана класса из справочника)
      Index = Cell.Frame;
      локЗаписьТестПлана = ТестПланПП[Index].ТестПланКласса;
      if (локЗаписьТестПлана <> nil):
        ДоУдаления;
        ТестПланПП.Delete(Index);
        ЕстьГруппаТестПланов(локЗаписьТестПлана.ПолноеИмяКласса, IndexGroup, LastIndex, УдалитьЕслиЕсть);
      else
        if CmOk = EnqOkCancel('Из программы тестирования будут удалены все тест-планы класса <' + Библио.ОписаниеКлассаПоИмени(ТестПланПП[Index].ПолноеИмяКласса) + '>. Продолжить?'):
          ДоУдаления;
          локПолноеИмяКласса = ТестПланПП[Index].ПолноеИмяКласса;
          pp = ТестПланПП.Count;
          for p = pp .. 1 step -1 do
            if (ТестПланПП[p].ПолноеИмяКласса = локПолноеИмяКласса):
              ТестПланПП.Delete(p);
            fi;
          od;
        fi;
      fi;
      --}

    -- перемещение строк
    elsif (Cell.Contents = '5') and (Cell.Owner = секцСценарий):--{ вверх
      Cell.SetFocus;
      Index = Cell.Frame;
      if (Index > 1):
        if Позиция_ОписаниеГруппы(Index):
          ПоднятьГруппу(Index);
        else
          if Позиция_ВходитВГруппу(Index) and Позиция_ВходитВГруппу(Index-1):
            секцСценарий.FrameUp(Index);
          elsif Позиция_ВнеГруппы(Index) and Позиция_ВходитВГруппу(Index-1):
            ЕстьТестКласса(ТестПланПП[Index-1].ПолноеИмяКласса, Index,);
            ОпуститьГруппу(Index-1);
          elsif Позиция_ВнеГруппы(Index) and not Позиция_ВходитВГруппу(Index-1):
            секцСценарий.FrameUp(Index);
          fi;
        fi;
      fi;
      --}
    elsif (Cell.Contents = '6') and (Cell.Owner = секцСценарий):--{ вниз
      Cell.SetFocus;
      Index = Cell.Frame;
      pp = секцСценарий.FramesCount;
      if (Index < pp):
        if Позиция_ОписаниеГруппы(Index):
          ОпуститьГруппу(Index);
        else
          if Позиция_ВходитВГруппу(Index) and Позиция_ВходитВГруппу(Index+1):
            секцСценарий.FrameDown(Index);
          elsif Позиция_ВнеГруппы(Index) and Позиция_ОписаниеГруппы(Index+1):
            ПоднятьГруппу(Index+1);
          elsif Позиция_ВнеГруппы(Index) and not Позиция_ОписаниеГруппы(Index+1):
            секцСценарий.FrameDown(Index);
          fi;
        fi;
      fi;
      --}
    -- карточка тест-плана класса
    elsif (Cell.Contents = '...') and (Cell.Owner = секцСценарий):--{
      Index = Cell.Frame;
      локЗаписьТестПлана = ТестПланПП[Index].ТестПланКласса;
      if (локЗаписьТестПлана <> nil):
        OpenBlankEditor('Тесты.редТестПланКласса', локЗаписьТестПлана,  Window.ModalWindow);
      else
        Message('Просмотр тест-плана на строке группы невозможен.');
      fi;--}
    fi;
  end;

  func Поле_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    var Index: Integer;
    var locIsGroup: logical;
    var locDiscription: string;
    Index = Cell.Frame;
    locIsGroup = (ТестПланПП[Index].ТестПланКласса = nil) and (ТестПланПП[Index].ПолноеИмяКласса <> nil);
    locDiscription = Библио.ОписаниеКлассаПоИмени(ТестПланПП[Index].ПолноеИмяКласса);
    locDiscription = if((locDiscription <> nil), locDiscription, 'НЕВЕРНОЕ ИМЯ КЛАССА');
    if (locIsGroup):
      Result = '<b+>' + locDiscription;
    else
      if (ТестПланПП[Index].inGroup) and (ТестПланПП[Index].ТестПланКласса <> nil):
        Result = RepStr(' ', 8) + ТестПланПП[Index].ТестПланКласса.Наим;
      elsif (not ТестПланПП[Index].inGroup):
        Result = locDiscription;
      fi;
    fi;


--    if (not locIsGroup) and (ТестПланПП[Index].inGroup) and (ТестПланПП[Index].ТестПланКласса <> nil):
--      Result = RepStr(' ', 8) + ТестПланПП[Index].ТестПланКласса.Наим;
--
--    elsif (not locIsGroup) and (not (ТестПланПП[Index].inGroup)) and (ТестПланПП[Index].ТестПланКласса <> nil):
--      Result = locDiscription;
--    elsif not (ТестПланПП[Index].inGroup):
--      if locIsGroup:
--        Result = '<b+>' + locDiscription;
--      else
--      fi;
----      if (ТестПланПП[Index].ТестПланКласса = nil):
----        --Result = '<b+>' + ТестПланПП[Index].НаимКласса;
----      else
----        Result = ТестПланПП[Index].ТестПланКласса.Наим;
----      fi;
--    fi;
  end;

  proc Поле_ПриРисовании(Cell: TemplateCell; Selected: Logical; var Color: Integer; var FieldColor: Integer; Font: Font);
    var locStyle: TemplateStyle;
    var locColor, locR, locG, locB, newR, newG, newB: Integer;
    var Delta: integer;
    if ПоказыватьЗебру and (Cell.Owner = секцСценарий):
      if (Mod(Cell.Frame, 2) = 0): -- это четная позиция
        Delta = -40;
        locStyle = Cell.Style;
        locColor = locStyle.FieldColor;
        SplitColor(locColor, locR, locG, locB);
        newR = if(((locR + Delta) > 0), Min([255, (locR + Delta)]), 0);
        newG = if(((locG + Delta) > 0), Min([255, (locG + Delta)]), 0);
        newB = if(((locB + Delta) > 0), Min([255, (locB + Delta)]), 0);
        locColor = newR + (newG * 256) + (newB * 256 * 256);
        FieldColor = locColor;
      fi;
    fi;
  end;
--}}

--{{ Обработчики событий прочих объектов шаблона

  proc флПриИзменении (Sender: CheckBox);
    if not ЗаморозитьЗаголовокТаблицы:
      фреймСценарий.UnFreezeArea;
    else
      ЗаморозкаЗаголовкаТаблицы;
    fi;
  end;
--}}

end