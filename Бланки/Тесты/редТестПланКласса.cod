--{{ Т9_Тесты - проект для тестирования проектов, созданных на платформе Т9 (c) ТБ.Бюджет, 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
--}

class inherited СИС2.БазовыйБланкРедактор "Тест-план класса Т9", editor ТестПланКласса;

import СИС2 classes Функции;

  inclass private

  stored var ЗаморозитьЗаголовокТаблицы: logical;
  stored var ПоказыватьЗебру: logical;

  inobject private

  var фреймДопСервис: TemplateFrame;
  var фреймРабочееПоле: TemplateFrame;
  var фреймРеквизиты: TemplateFrame;
  var фреймСценарий: TemplateFrame;
  var секцНаимТестПлана: TemplateSection;
  var секцСценарийЗаголовокТаблицы: TemplateSection;
  var секцСценарий: TemplateSection;
  var кнСпецификация: Button;
  var кнЗаполнитьПоШаблону: Button;
  var кнЗаполнитьПоОбразцу: Button;
  var кнДобавтьТест: Button;

  var NN: integer[] = $;

--{{ Вспомогательные методы

  proc ИнициализироватьЭлементыЦветаКоторыхМожноМенять;
    ЭлементыЦветаКоторыхМожноМенять = [[Self.Template,фреймДопСервис],[ОсновнойФрейм]];
  end;

  proc УстановитьФокусНаПервоеПолеВвода;
    Self.Template.CellByField['ПолноеИмяКласса'].SetFocus;
  end;

  proc ВидФормы;
    var ЗапретитьВыборКласса: logical;
    var locCell: TemplateCell;
    ЗапретитьВыборКласса = (ЭтоШаблон) or (ТестПП.Count > 0);
    locCell = Self.Template.CellByField['ПолноеИмяКласса'];
    locCell.Style = if(ЗапретитьВыборКласса, StyleByName('Поле вывода'), StyleByName('Поле выбора'));
    locCell.Enabled = not ЗапретитьВыборКласса;
    --locCell.Button = not ЗапретитьВыборКласса;
    locCell = Self.Template.CellByField['ТипБазовогоКласса'];
    locCell.Style = if((ТестПП.Count > 0), StyleByName('Поле вывода'), StyleByName('Поле выбора'));
    locCell.Enabled = not (ТестПП.Count > 0);
    locCell.Button = not (ТестПП.Count > 0);
    locCell = Self.Template.CellByField['ЭтоШаблон'];
    locCell.Enabled = not (ТестПП.Count > 0);
    кнСпецификация.Enabled = (not ЭтоШаблон) and (ПолноеИмяКласса <> nil);
    кнЗаполнитьПоШаблону.Enabled = (not ЭтоШаблон) and (ПолноеИмяКласса <> nil) and (ТестПП.Count = 0);
    кнЗаполнитьПоОбразцу.Enabled = (not ЭтоШаблон) and (ПолноеИмяКласса <> nil) and (ТестПП.Count = 0);
    кнДобавтьТест.Enabled = (not ЭтоШаблон) and (ПолноеИмяКласса <> nil);
  end;

  proc ЗаморозкаЗаголовкаТаблицы;
    var локГраницаЗаморозки: numeric;
    var r: integer;
    with секцСценарийЗаголовокТаблицы do
      for r = 1 .. RowsCount do
        локГраницаЗаморозки = локГраницаЗаморозки + Row[r].Height;
      od;
    end;
    фреймСценарий.FreezeArea(0, 0, 0, локГраницаЗаморозки);
  end;

--}}

--{{ Обработчики событий шаблона

  proc шаблон_ПриСоздании(Context :Variant);
    var locCell: TemplateCell;
    inherited шаблон_ПриСоздании(Context);
    locCell = Self.Template.CellByField['ТипБазовогоКласса'];
    Библио.ОбновитьСписокПоля(locCell, Константы.ТипыБазовыйхКлассов);
    locCell.List.Add('Не определено|0');
  end;

  proc шаблон_ПриСчитывании;
    inherited шаблон_ПриСчитывании;
    ВидФормы;
    if ЗаморозитьЗаголовокТаблицы:
      ЗаморозкаЗаголовкаТаблицы;
    fi;
  end;

--}}

--{{ Обработчики событий клеток шаблона
  func Поле_ПриНажатии (Cell: TemplateCell; Action: Template.ClickTypes): Logical;
    var локЗаписьПримера: Т9_Тесты.ТестовыйПример;
    var locCrd: CardForm;
    var Index: integer;
    func МожноДобавлятьПозиции: logical;--{
      if ЭтоШаблон:
        Result = (ТипБазовогоКласса <> nil) and (ПолноеИмяКласса = nil) and (ИмяПроектаКласса = nil);
      else
        Result = (ТипБазовогоКласса <> nil) and (ПолноеИмяКласса <> nil) and (ИмяПроектаКласса <> nil);
      fi;
      if (not Result):
        Message('Пожалуйста, завершите заполнение реквизитов тест-плана!');
      fi;
    end;--}
    if (Cell.Contents = 'ЭтоШаблон'):--{
      if not Cell.Value:
        ПолноеИмяКласса = nil;
        ИмяПроектаКласса = nil;
      fi;
      ЭтоШаблон = not Cell.Value;
      ВидФормы;--}
    -- шаблонный тест-план
    elsif (Cell.Contents = '+') and (Cell.Owner = секцСценарийЗаголовокТаблицы) and (ЭтоШаблон) and МожноДобавлятьПозиции:--{ добавление шаблонного теста в шаблонный тест-план из заголовка таблицы
      Template.BeginModify;
      locCrd = Тесты.картТестовыйПример.Create;
      locCrd.ТипБазовогоКлассаПоУмолчанию = ТипБазовогоКласса;
      if CmOk = locCrd.ShowEx(локЗаписьПримера, 'ЭтоШаблон and ТипБазовогоКласса=' + Str(ТипБазовогоКласса), Window.ModalWindow):
        with ТестПП.Insert(1) do
          Пример = локЗаписьПримера;
        end;
      fi;
      ВидФормы;
      Template.EndModify;--}
    elsif (Cell.Contents = '+') and (Cell.Owner = секцСценарий) and (ЭтоШаблон) and МожноДобавлятьПозиции:--{ добавление шаблонного теста в шаблонный тест-план из строки таблицы
      Template.BeginModify;
      locCrd = Тесты.картТестовыйПример.Create;
      locCrd.ТипБазовогоКлассаПоУмолчанию = ТипБазовогоКласса;
      if CmOk = locCrd.ShowEx(локЗаписьПримера, 'ЭтоШаблон and ТипБазовогоКласса=' + Str(ТипБазовогоКласса), Window.ModalWindow):
        Index = Cell.Frame;
        with ТестПП.Insert(Index + 1) do
          Пример = локЗаписьПримера;
        end;
      fi;
      ВидФормы;
      Template.EndModify;--}
    elsif (Cell.Contents in ['-','x']) and (Cell.Owner = секцСценарий) and (ЭтоШаблон):--{ удаление строки из шаблонного тест-плана (без удаления теста из справочника)
      ТестПП.Delete(Index);
      ВидФормы;--}
    -- обычный тест-план
    elsif (Cell.Contents = '+') and (Cell.Owner = секцСценарийЗаголовокТаблицы) and (not ЭтоШаблон) and МожноДобавлятьПозиции:--{ добавление уникального теста обычный тест-план из заголовка таблицы
      Template.BeginModify;
      with ТестПП.Insert(1) do
        локЗаписьПримера = Т9_Тесты.ТестовыйПример.Create;
        локЗаписьПримера.ТипБазовогоКласса = ТипБазовогоКласса;
        локЗаписьПримера.ПолноеИмяКласса = ПолноеИмяКласса;
        локЗаписьПримера.ИмяПроектаКласса = ИмяПроектаКласса;
        локЗаписьПримера.Post;
        Пример = локЗаписьПримера;
      end;
      ВидФормы;
      Template.EndModify;--}
    elsif (Cell.Contents = '+') and (Cell.Owner = секцСценарий) and (not ЭтоШаблон) and МожноДобавлятьПозиции:--{ добавление уникального теста обычный тест-план из строки таблицы
      Template.BeginModify;
      Index = Cell.Frame;
      with ТестПП.Insert(Index + 1) do
        локЗаписьПримера = Т9_Тесты.ТестовыйПример.Create;
        локЗаписьПримера.ТипБазовогоКласса = ТипБазовогоКласса;
        локЗаписьПримера.ПолноеИмяКласса = ПолноеИмяКласса;
        локЗаписьПримера.ИмяПроектаКласса = ИмяПроектаКласса;
        локЗаписьПримера.Post;
        Пример = локЗаписьПримера;
      end;
      ВидФормы;
      Template.EndModify;--}
    elsif (Cell.Contents in ['-','x']) and (Cell.Owner = секцСценарий) and (not ЭтоШаблон):--{ удаление строки из обычного тест-плана (вместе с удалением теста из справочника - если это возможно!)
      Template.BeginModify;
      Index = Cell.Frame;
      локЗаписьПримера = ТестПП[Index].Пример;
      try
        ТестПП[Index].Пример = nil;
        локЗаписьПримера.Delete(true);
      except
        ТестПП[Index].Пример = локЗаписьПримера;
      end;
      if (ТестПП[Index].Пример = nil):
        ТестПП.Delete(Index);
      fi;
      ВидФормы;
      Template.EndModify;--}
    -- перемещение строк
    elsif (Cell.Contents = '5') and (Cell.Owner = секцСценарий):--{ вверх
      Cell.SetFocus;
      if (Cell.Frame > 1):
        секцСценарий.FrameUp(Cell.Frame);
      fi;--}
    elsif (Cell.Contents = '6') and (Cell.Owner = секцСценарий):--{ вниз
      Cell.SetFocus;
      if (Cell.Frame < секцСценарий.FramesCount):
        секцСценарий.FrameDown(Cell.Frame);
      fi;--}
    -- карточка тестового примера
    elsif (Cell.Contents = '...') and (Cell.Owner = секцСценарий):--{
      Index = Cell.Frame;
      локЗаписьПримера = ТестПП[Index].Пример;
      if (локЗаписьПримера <> nil):
        OpenBlankEditor('Тесты.редТестовыйПример', локЗаписьПримера,  Window.ModalWindow);
      else
        Message('Ошибка. Тестовый пример был удален нештатным способом.');
      fi;--}
    fi;
  end;

  func Поле_ПриВходе(Cell: TemplateCell; Index: Integer; Action: Template.EnterTypes): Logical;
    var vClass: Class;
    if (Cell.Contents = 'ПолноеИмяКласса'):
      if (Action = Template.Clear):
        ПолноеИмяКласса = nil;
        ИмяПроектаКласса = nil;
      else
        if (ТипБазовогоКласса in [Константы.ТипБланк,Константы.ТипБланкРедактор]):
          if CmOk = ChooseClass(Kernel.BlankForm, vClass, ''):
            ПолноеИмяКласса = FullClassName(vClass);
            ИмяПроектаКласса = vClass.ClassProject;
            ТипБазовогоКласса = Библио.ТипТестируемогоКласса(vClass);
            Template.EndEdit(true);
          fi;
        elsif (ТипБазовогоКласса in [Константы.типКартотека]):
          if CmOk = ChooseClass(Kernel.CardForm, vClass, ''):
            ПолноеИмяКласса = FullClassName(vClass);
            ИмяПроектаКласса = vClass.ClassProject;
            Template.EndEdit(true);
          fi;
        elsif (ТипБазовогоКласса in [Константы.типОтчет]):
          if CmOk = ChooseClass(Kernel.ReportForm, vClass, ''):
            ПолноеИмяКласса = FullClassName(vClass);
            ИмяПроектаКласса = vClass.ClassProject;
            Template.EndEdit(true);
          fi;
        elsif (ТипБазовогоКласса  = nil):
          Message ('Пожалуйста, заполните сначала поле <Тип класса>!');
          Self.Template.CellByField['ТипБазовогоКласса'].SetFocus;
        fi;
      fi;
      ВидФормы;
    fi;
  end;

  func Поле_ПриВводе(Cell: TemplateCell; Value: Variant): Logical;
    var Index: Integer;
    Index = Cell.Frame;
    if (Cell.Contents = 'Пример.Наим'):
      if (ТестПП[Index].Пример <> nil):
        ТестПП[Index].Пример.Наим = Value as string;
      fi;
    elsif (Cell.Contents = 'Пример.СценарийТеста'):
      if (ТестПП[Index].Пример <> nil):
        ТестПП[Index].Пример.СценарийТеста = Value as string;
      fi;
    elsif (Cell.Contents = 'Пример.ОжидаемыйРезультат'):
      if (ТестПП[Index].Пример <> nil):
        ТестПП[Index].Пример.ОжидаемыйРезультат = Value as string;
      fi;
    fi;
  end;

  proc Поле_ПриВыходе (Cell: TemplateCell; Index: Integer);
    if (Cell.Contents = 'ТипБазовогоКласса'):
      ВидФормы;
    fi;
  end;

  func Поле_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    var Index: Integer;
    Index = Cell.Frame;
    if (Cell.Contents = 'Пример.Наим') and (Index <= секцСценарий.Count):
      if (ТестПП[Index].Пример <> nil) and (Action = Template.Output):
        Result = if(ТестПП[Index].Пример.Наим <> nil, ТестПП[Index].Пример.Наим, '<cf:$808080>Тест № ' + Str(Index));
      elsif (ТестПП[Index].Пример <> nil) and (Action <> Template.Output):
        Result = if(ТестПП[Index].Пример.Наим <> nil, ТестПП[Index].Пример.Наим, 'Тест № ' + Str(Index));
      fi;
    elsif (Cell.Contents = 'Пример.СценарийТеста') and (Index <= секцСценарий.Count):
      Result = if(ТестПП[Index].Пример <> nil, ТестПП[Index].Пример.СценарийТеста, nil);
    elsif (Cell.Contents = 'Пример.ОжидаемыйРезультат') and (Index <= секцСценарий.Count):
      Result = if(ТестПП[Index].Пример <> nil, ТестПП[Index].Пример.ОжидаемыйРезультат, nil);
    fi;
  end;

  func ПолеЗаголовокОкнаФормы_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): String;
    Window.Caption = if(Self.Record.ЭтоШаблон, 'Тест-план класса Т9 (шаблон)', 'Тест-план класса Т9');
    Result = if(Self.Record.ЭтоШаблон, 'Типовой тест-план класса Т9', 'Тест-план класса Т9');
  end;

  proc Поле_ПриРисовании(Cell: TemplateCell; Selected: Logical; var Color: Integer; var FieldColor: Integer; Font: Font);
    var locStyle: TemplateStyle;
    var locColor, locR, locG, locB, newR, newG, newB: Integer;
    var Delta: integer;
    if ПоказыватьЗебру and (Cell.Contents in ['Пример.Наим','Пример.СценарийТеста','Пример.ОжидаемыйРезультат','NN']):
      if (Mod(Cell.Frame, 2) = 0): -- это четная позиция
        Delta = -40;
        locStyle = Cell.Style;
        locColor = locStyle.FieldColor;
        SplitColor(locColor, locR, locG, locB);
        newR = if(((locR + Delta) > 0), Min([255, (locR + Delta)]), 0);
        newG = if(((locG + Delta) > 0), Min([255, (locG + Delta)]), 0);
        newB = if(((locB + Delta) > 0), Min([255, (locB + Delta)]), 0);
        locColor = newR + (newG * 256) + (newB * 256 * 256);
        FieldColor = locColor;
      fi;
    fi;
  end;
--}}

--{{ Обработчики событий прочих объектов шаблона
  proc кнПриНажатии (Sender: Button);
    var локЗаписьСпецификации: Т9_Тесты.СпецификацияКласса;
    var локЗаписьТестПлана: Т9_Тесты.ТестПланКласса;
    var локЗаписьПримера: Т9_Тесты.ТестовыйПример;
    var локЗаписьПримераШбл: Т9_Тесты.ТестовыйПример;
    var t, tt: integer;
    var aId: integer[]; -- массив DocId использованных шаблонных тестов
    if (Sender = кнСпецификация):
      with Query.Create([Т9_Тесты.СпецификацияКласса]) do
        Filter = 'ПолноеИмяКласса="' + ПолноеИмяКласса + '"';
        if RecordsExists:
          Select;
          локЗаписьСпецификации = Current;
        else
          локЗаписьСпецификации = Т9_Тесты.СпецификацияКласса.Create;
          локЗаписьСпецификации.ТипБазовогоКласса = ТипБазовогоКласса;
          локЗаписьСпецификации.ПолноеИмяКласса   = ПолноеИмяКласса;
          локЗаписьСпецификации.ИмяПроектаКласса  = ИмяПроектаКласса;
          локЗаписьСпецификации.Post;
        fi;
        OpenBlankEditor('Тесты.редСпецификацияКласса', локЗаписьСпецификации,  Window.PopupWindow);
      end;
    elsif (Sender = кнЗаполнитьПоШаблону):
      if CmOk = OpenCardfile('Тесты.картТестПланКласса', локЗаписьТестПлана, 'ЭтоШаблон and ТипБазовогоКласса=' + Str(ТипБазовогоКласса), Window.ModalWindow):
        tt = локЗаписьТестПлана.ТестПП.Count;
        for t = 1 .. tt do
          with ТестПП.Insert(t) do
            локЗаписьПримера = Т9_Тесты.ТестовыйПример.Create;
            локЗаписьПримера.ТипБазовогоКласса  = ТипБазовогоКласса;
            локЗаписьПримера.ПолноеИмяКласса    = ПолноеИмяКласса;
            локЗаписьПримера.ИмяПроектаКласса   = ИмяПроектаКласса;
            локЗаписьПримера.ПоШаблону          = локЗаписьТестПлана.ТестПП[t].Пример;
            локЗаписьПримера.МнемоКод           = локЗаписьТестПлана.ТестПП[t].Пример.МнемоКод;
            локЗаписьПримера.Наим               = локЗаписьТестПлана.ТестПП[t].Пример.Наим;
            локЗаписьПримера.СценарийТеста      = локЗаписьТестПлана.ТестПП[t].Пример.СценарийТеста;
            локЗаписьПримера.ОжидаемыйРезультат = локЗаписьТестПлана.ТестПП[t].Пример.ОжидаемыйРезультат;
            локЗаписьПримера.Post;
            Пример = локЗаписьПримера;
          end;
        od;
      fi;
      ВидФормы;
    elsif (Sender = кнЗаполнитьПоОбразцу):
      if CmOk = OpenCardfile('Тесты.картТестПланКласса', локЗаписьТестПлана, 'not ЭтоШаблон and ТипБазовогоКласса=' + Str(ТипБазовогоКласса), Window.ModalWindow):
        tt = локЗаписьТестПлана.ТестПП.Count;
        for t = 1 .. tt do
          with ТестПП.Insert(t) do
            локЗаписьПримера = Т9_Тесты.ТестовыйПример.Create;
            локЗаписьПримера.ТипБазовогоКласса  = ТипБазовогоКласса;
            локЗаписьПримера.ПолноеИмяКласса    = ПолноеИмяКласса;
            локЗаписьПримера.ИмяПроектаКласса   = ИмяПроектаКласса;
            локЗаписьПримера.ПоШаблону          = локЗаписьТестПлана.ТестПП[t].Пример.ПоШаблону;
            локЗаписьПримера.МнемоКод           = локЗаписьТестПлана.ТестПП[t].Пример.МнемоКод;
            локЗаписьПримера.Наим               = локЗаписьТестПлана.ТестПП[t].Пример.Наим;
            локЗаписьПримера.СценарийТеста      = локЗаписьТестПлана.ТестПП[t].Пример.СценарийТеста;
            локЗаписьПримера.ОжидаемыйРезультат = локЗаписьТестПлана.ТестПП[t].Пример.ОжидаемыйРезультат;
            локЗаписьПримера.Post;
            Пример = локЗаписьПримера;
          end;
        od;
      fi;
      ВидФормы;
    elsif (Sender = кнДобавтьТест):
      tt = ТестПП.Count;
      for t = 1 .. tt do
        if (ТестПП[t].Пример.ПоШаблону <> nil):
          aId[t] = ТестПП[t].Пример.ПоШаблону.DocId;
        fi;
      od;
      if CmOk = OpenCardfile('Тесты.картТестовыйПример', локЗаписьПримераШбл, 'ЭтоШаблон and not DocId in ' + ToStr(aId), Window.ModalWindow):
        with ТестПП.Insert(1) do
          локЗаписьПримера = Т9_Тесты.ТестовыйПример.Create;
          локЗаписьПримера.ТипБазовогоКласса  = ТипБазовогоКласса;
          локЗаписьПримера.ПолноеИмяКласса    = ПолноеИмяКласса;
          локЗаписьПримера.ИмяПроектаКласса   = ИмяПроектаКласса;
          локЗаписьПримера.ПоШаблону          = локЗаписьПримераШбл;
          локЗаписьПримера.МнемоКод           = локЗаписьПримераШбл.МнемоКод;
          локЗаписьПримера.Наим               = локЗаписьПримераШбл.Наим;
          локЗаписьПримера.СценарийТеста      = локЗаписьПримераШбл.СценарийТеста;
          локЗаписьПримера.ОжидаемыйРезультат = локЗаписьПримераШбл.ОжидаемыйРезультат;
          локЗаписьПримера.Post;
          Пример = локЗаписьПримера;
        end;
      fi;
      ВидФормы;
    fi;
  end;

  proc флПриИзменении (Sender: CheckBox);
    if not ЗаморозитьЗаголовокТаблицы:
      фреймСценарий.UnFreezeArea;
    else
      ЗаморозкаЗаголовкаТаблицы;
    fi;
  end;
--}}

end