--{{ Т9_Тесты - проект для тестирования проектов, созданных на платформе Т9 (c) ТБ.Бюджет, 2015
--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
--}}

--class inherited СИС2.БазовыйБланкРедактор "Сеанс тестирования", editor СеансТестирования;
class inherited Тесты.редПроектСеанса "Сеанс тестирования", editor СеансТестирования;

import СИС2 classes Функции, СтроковыеФункции;
import classes Константы;
import classes Сеанс.Данные.Элемент;

  inclass private

  type типДанныхЭлементаНавигатора = (типОписание = 1, типИнтерфейсЭлемента);

  stored var фреймРеквизитыДопСкрыт: logical;

  inobject private

  var фреймДопСервис: TemplateFrame;
  var тблНавигатор: Grid;
  var фреймРабЭлемент1: TemplateFrame;
  var фреймРабЭлемент2: TemplateFrame;

  var кнТестоваяБаза: Button;
  var кнНачатьСменаСтадииСеанса: Button;

  var секцСценарий1ЗаголовокТаблицы: TemplateSection;
  var секцСценарий1: TemplateSection;
  var секцСценарий2ЗаголовокТаблицы: TemplateSection;
  var секцСценарий2: TemplateSection;
  var секцСценарий3: TemplateSection;

  var секцСтенд01: TemplateSection;
  var секцСтенд30: TemplateSection;

  var NN: integer[] = $;

  var Тест_: Т9_Тесты.ТестОтчет[];
  var ТекущийТест_: Т9_Тесты.ТестОтчет;

  var АктивныйЭлементНавигатора: GridItem;
  var АктивныйЭлементДанных: Сеанс.Данные.Элемент;
  var АктивныйЭлементКласс: Сеанс.Данные.Элемент;

  var локТранзакция: Transaction;

  --var ДеревоДанных: СИС2.Дерево;

--{{ Вспомогательные методы

--  proc ОбновитьДеревоДанных;
--    var c, cc, elm: integer;
--    var локПрограммаСеанса: СИС2.Дерево;
--    var локТестПланы: СИС2.Дерево; -- группа тест-планов (в рамках класса)
--    var локТестПлан: СИС2.Дерево; -- 1 тест-план на весь класс
--    var локОбъектПрограммаСеанса: Сеанс.Данные.Элемент;
--    var CreateParam: variant[];
--    proc ДобавитьТестОтчеты(const locItem: integer; const locParentPlan: Сеанс.Данные.Элемент); --{
--      var locFlt: string[];
--      var t: integer;
--      with Query.Create([Т9_Тесты.ТестОтчет]) do
--        locFlt[1] = 'Сеанс=' + Str(Record);
--        locFlt[2] = 'ТестПлан=' + Str(Record.ТестПланПП[locItem].ТестПланМодуля);
--        Filter = СложитьСтрокиФильтраПоИ(locFlt);
--        Order = 'НомерПП';
--        Select;
--        while not Eof do
--          t = t + 1;
--          CreateParam = nil;
--          CreateParam[индОписаниеЭлемента] = nil;
--          CreateParam[индНомерПП] = t;
--          CreateParam[индДанныеВЗаписи] = Current;
--          локТестПлан.ДобавитьЗначение(Сеанс.Данные.ТестОтчет.CreateEx(CreateParam));
--          Next;
--        od;
--      end;
--    end;--}
--    proc ДобавитьДанные(var locItem: integer); --{
--      var locIsGroup, locOutGroup: logical;
--      var локОбъектТестПланы: Сеанс.Данные.Элемент;
--      var локОбъектТестПлан: Сеанс.Данные.Элемент;
--      var локПолноеИмяКласса: string;
--      var locDiscription: string;
--      with Record.ТестПланПП.Items[locItem] do
--        locIsGroup = (ТестПланМодуля = nil);
--        locOutGroup = (ТестПланМодуля <> nil) and (not inGroup);
--        if locOutGroup: --{ тест-план вне группы
--          CreateParam = nil;
--          CreateParam[индОписаниеЭлемента] = nil;
--          CreateParam[индНомерПП] = locItem;
--          CreateParam[индПолноеИмяКласса] = ПолноеИмяКласса;
--          CreateParam[индДанныеВЗаписи] = ТестПланМодуля;
--          локОбъектТестПлан = Сеанс.Данные.ТестПлан.CreateEx(CreateParam);
--          локПрограммаСеанса.ДобавитьЗначение(локОбъектТестПлан);
--          elm = локПрограммаСеанса.ЧислоЗначений;
--          локПрограммаСеанса.УстановитьПризнакУзла(elm, true);
--          локТестПлан = локПрограммаСеанса.ВернутьУзел(elm, true);
--          ДобавитьТестОтчеты(locItem, локОбъектТестПлан);--}
--        elsif locIsGroup:
--          --{ группа тест-планов
--          locDiscription = Библио.ОписаниеКлассаПоИмени(ПолноеИмяКласса);
--          locDiscription = if((locDiscription <> nil), locDiscription, 'НЕВЕРНОЕ ИМЯ КЛАССА');
--          CreateParam = nil;
--          CreateParam[индОписаниеЭлемента] = locDiscription;
--          CreateParam[индНомерПП] = locItem;
--          CreateParam[индПолноеИмяКласса] = ПолноеИмяКласса;
--          CreateParam[индДанныеВЗаписи] = nil;
--          локОбъектТестПланы = Сеанс.Данные.ТестПланы.CreateEx(CreateParam);
--          локПрограммаСеанса.ДобавитьЗначение(локОбъектТестПланы);
--          elm = локПрограммаСеанса.ЧислоЗначений;
--          локПрограммаСеанса.УстановитьПризнакУзла(elm, true);
--          локТестПланы = локПрограммаСеанса.ВернутьУзел(elm, true);
--          локПолноеИмяКласса = ПолноеИмяКласса;
--          locItem = locItem + 1; --}
--          --{ тест-планы в группе
--          while (locItem <= Record.ТестПланПП.Count) and (Record.ТестПланПП.Items[locItem].ПолноеИмяКласса = локПолноеИмяКласса) do
--            CreateParam = nil;
--            CreateParam[индОписаниеЭлемента] = nil;
--            CreateParam[индНомерПП] = locItem;
--            CreateParam[индПолноеИмяКласса] = Record.ТестПланПП.Items[locItem].ПолноеИмяКласса;
--            CreateParam[индДанныеВЗаписи] = Record.ТестПланПП.Items[locItem].ТестПланМодуля;
--            локОбъектТестПлан = Сеанс.Данные.ТестПлан.CreateEx(CreateParam);
--            локТестПланы.ДобавитьЗначение(локОбъектТестПлан);
--            elm = локТестПланы.ЧислоЗначений;
--            локТестПланы.УстановитьПризнакУзла(elm, true);
--            локТестПлан = локТестПланы.ВернутьУзел(elm, true);
--            ДобавитьТестОтчеты(locItem, локОбъектТестПлан);
--            locItem = locItem + 1;
--          end;
--          locItem = locItem - 1;--}
--        fi;
--
--      end;
--    end; --}
--    ДеревоДанных = СИС2.Дерево.Create;
--    CreateParam = nil;
--    CreateParam[индОписаниеЭлемента] = nil;
--    CreateParam[индПолноеИмяКласса] = nil;
--    CreateParam[индДанныеВЗаписи] = Record;
--    локОбъектПрограммаСеанса = Сеанс.Данные.ПрограммаСеанса.CreateEx(CreateParam);
--    ДеревоДанных.ДобавитьЗначение(локОбъектПрограммаСеанса);
--    ДеревоДанных.УстановитьПризнакУзла(1, true);
--    локПрограммаСеанса = ДеревоДанных.ВернутьУзел(1, true);
--    cc = Record.ТестПланПП.Count;
--    for c = 1 .. cc do
--      ДобавитьДанные(c);
--    od;
--  end;

  proc ИнициализироватьЭлементыЦветаКоторыхМожноМенять;
    ЭлементыЦветаКоторыхМожноМенять = [[Self.Template,фреймДопСервис],[ОсновнойФрейм]];
  end;

  proc ИзменитьСостояниеЗаписи;
    СИС2.ФункцииДокумента.RecordEdit(Record);
    if not Record.Modified then
      Record.Modified = true;
    end;
  end;

  proc АктуализироватьТестПримеры(локТестПланМодуля: Т9_Тесты.ТестПланМодуля); -- по записи тест-плана создает тесты для текущего сеанса, отсутствующие в базе
    var t, tt: integer;
    var локТестовыйПример: Т9_Тесты.ТестовыйПример;
    var локТест: Т9_Тесты.ТестОтчет;
    var ТестСуществует: logical;
    func ТребуетсяСозданиеТеста: logical;--{
      var locFlt: string[];
      if (локТестовыйПример <> nil):
        locFlt[1] = 'Сеанс=' + Str(Record);
        locFlt[2] = 'ТестПлан=' + Str(локТестПланМодуля);
        locFlt[3] = 'Пример=' + Str(локТестовыйПример);
        with Query.Create([Т9_Тесты.ТестОтчет]) do
          Filter = СложитьСтрокиФильтраПоИ(locFlt);
          ТестСуществует = RecordsExists;
          if ТестСуществует:
            Select;
            локТест = Current;
          fi;
          Result = not ТестСуществует;
        end;
      fi;
    end;--}
    tt = локТестПланМодуля.ТестПП.Count;
    for t = 1 .. tt do
      локТестовыйПример = локТестПланМодуля.ТестПП[t].Пример;
      ТестСуществует = false;
      if ТребуетсяСозданиеТеста:
        локТест = Т9_Тесты.ТестОтчет.Create;
        локТест.Сеанс = Record;
        локТест.ТестПлан = локТестПланМодуля;
        локТест.Пример = локТестовыйПример;
        локТест.НомерПП = t;
        локТест.Post;
      elsif (not ТребуетсяСозданиеТеста) and ТестСуществует:
        локТест.НомерПП = t;
      fi;
    od;
  end;

  proc УдалитьТестПримеры(локТестПланМодуля: Т9_Тесты.ТестПланМодуля); -- по записи тест-плана удалят тесты для текущего сеанса
    var locFlt: string[];
    with Query.Create([Т9_Тесты.ТестОтчет]) do
      locFlt[1] = 'Сеанс=' + Str(Record);
      locFlt[2] = 'ТестПлан=' + Str(локТестПланМодуля);
      Filter = СложитьСтрокиФильтраПоИ(locFlt);
      IncludeDeleted = true;
      Select;
      while not Eof do
        if (not Current.Deleted):
          try Current.Delete;
          except end;
        fi;
        Next;
      od;
    end;
  end;

  proc ПрочитатьТестПримеры(локТестПланМодуля: Т9_Тесты.ТестПланМодуля);
    var locFlt: string[];
    var t: integer;
    Тест_ = nil;
    with Query.Create([Т9_Тесты.ТестОтчет]) do
      locFlt[1] = 'Сеанс=' + Str(Record);
      locFlt[2] = 'ТестПлан=' + Str(локТестПланМодуля);
      Filter = СложитьСтрокиФильтраПоИ(locFlt);
      Order = 'НомерПП';
      Select;
      while not Eof do
        t = t + 1;
        Тест_[t] = Current;
        Next;
      od;
    end;
  end;

  proc ИнициализироватьНавигатор;
    var i, ii: integer;
    --{ очистка навигатора
    тблНавигатор.BeginModify;
    тблНавигатор.Root.Clear;
    ii = тблНавигатор.ColumnsCount;
    for i = ii .. 1 step -1 do
      тблНавигатор.DeleteColumn(i);
    od;
    тблНавигатор.EndModify;--}
    --{ создание столбцов навигатора
    with тблНавигатор.AddColumn do
      Caption      = '';
      Font.Name    = 'Arial';
      Font.Size    = 8;
      Width        = 0;
      Alignment    = Kernel.Template.LeftAlign;
      CanEdit      = false;
      CanSort      = false;
      ColumnFormat = Kernel.Cardfile.StringFormat;
    end;
    --}
    --{ оформление навигатора
    with тблНавигатор do
      ShowHeader = false;
      ShowIcons = true;
      ShowRoot = false;
      ShowGrid  = false;
      ShowZebra  = false;
    end;
    --}
  end;

  proc ЗаполнитьНавигатор;
    var ВетвьПрограммаСеанса: GridItem;
    var c, cc: integer;
    proc ДобавитьТестОтчеты(locItem: integer; локВетвьТестПлан: GridItem); --{
      var locFlt: string[];
      var t: integer;
      var CreateParam: variant[];
      var локОбъектТестОтчет: Сеанс.Данные.Элемент;
      var локЭлементНавигатора: variant[];
      var ВетвьТестОтчет: GridItem;
      with Query.Create([Т9_Тесты.ТестОтчет]) do
        locFlt[1] = 'Сеанс=' + Str(Record);
        locFlt[2] = 'ТестПлан=' + Str(Record.ТестПланПП[locItem].ТестПланМодуля);
        Filter = СложитьСтрокиФильтраПоИ(locFlt);
        Order = 'НомерПП';
        Select;
        while not Eof do
          t = t + 1;
          CreateParam = nil;
          CreateParam[индОписаниеЭлемента] = nil;
          CreateParam[индНомерПП] = t;
          CreateParam[индДанныеВЗаписи] = Current;
          локОбъектТестОтчет = Сеанс.Данные.ТестОтчет.CreateEx(CreateParam);
          локЭлементНавигатора[типОписание] = локОбъектТестОтчет.ОписаниеЭлемента;
          локЭлементНавигатора[типИнтерфейсЭлемента] = локОбъектТестОтчет;
          локВетвьТестПлан.Add(локЭлементНавигатора);
          ВетвьТестОтчет = локВетвьТестПлан.Items[локВетвьТестПлан.Count];
          ВетвьТестОтчет.Image = локОбъектТестОтчет.ИконкаЭлемента;
          Next;
        od;
      end;
    end; --}
    proc ДобавитьВетвь(var locItem: integer); --{
      var locIsGroup, locOutGroup: logical;
      var CreateParam: variant[];
      var локОбъектТестПланы: Сеанс.Данные.Элемент;
      var локОбъектТестПлан: Сеанс.Данные.Элемент;
      var локЭлементНавигатора: variant[];
      var ВетвьТестПланы, ВетвьТестПлан: GridItem;
      var локПолноеИмяКласса: string;
      var locDiscription: string;
      with Record.ТестПланПП.Items[locItem] do
        locIsGroup = (ТестПланМодуля = nil);
        locOutGroup = (ТестПланМодуля <> nil) and (not inGroup);
        if locOutGroup: --{ тест-план вне группы
          CreateParam = nil;
          CreateParam[индОписаниеЭлемента] = nil;
          CreateParam[индНомерПП] = locItem;
          CreateParam[индПолноеИмяКласса] = ПолноеИмяКласса;
          CreateParam[индДанныеВЗаписи] = ТестПланМодуля;
          локОбъектТестПлан = Сеанс.Данные.ТестПлан.CreateEx(CreateParam);
          локЭлементНавигатора[типОписание] = локОбъектТестПлан.ОписаниеЭлемента;
          локЭлементНавигатора[типИнтерфейсЭлемента] = локОбъектТестПлан;
          ВетвьПрограммаСеанса.Add(локЭлементНавигатора);
          ВетвьТестПлан = ВетвьПрограммаСеанса.Items[ВетвьПрограммаСеанса.Count];
          ВетвьТестПлан.Image = локОбъектТестПлан.ИконкаЭлемента;
          ВетвьТестПлан.isGroup = true;
          ДобавитьТестОтчеты(locItem, ВетвьТестПлан); --}
        elsif locIsGroup: --{ группа тест-планов
          locDiscription = Библио.ОписаниеКлассаПоИмени(ПолноеИмяКласса);
          locDiscription = if((locDiscription <> nil), locDiscription, 'НЕВЕРНОЕ ИМЯ КЛАССА');
          CreateParam = nil;
          CreateParam[индОписаниеЭлемента] = locDiscription;
          CreateParam[индНомерПП] = locItem;
          CreateParam[индПолноеИмяКласса] = ПолноеИмяКласса;
          CreateParam[индДанныеВЗаписи] = nil;
          локОбъектТестПланы = Сеанс.Данные.ТестПланы.CreateEx(CreateParam);
          локЭлементНавигатора[типОписание] = локОбъектТестПланы.ОписаниеЭлемента;
          локЭлементНавигатора[типИнтерфейсЭлемента] = локОбъектТестПланы;
          ВетвьПрограммаСеанса.Add(локЭлементНавигатора);
          ВетвьТестПланы = ВетвьПрограммаСеанса.Items[ВетвьПрограммаСеанса.Count];
          ВетвьТестПланы.Image = локОбъектТестПланы.ИконкаЭлемента;
          ВетвьТестПланы.isGroup = true;
          локПолноеИмяКласса = ПолноеИмяКласса;
          locItem = locItem + 1; --}
          --{ тест-планы в группе
          while (locItem <= Record.ТестПланПП.Count) and (Record.ТестПланПП.Items[locItem].ПолноеИмяКласса = локПолноеИмяКласса) do
            CreateParam = nil;
            CreateParam[индОписаниеЭлемента] = nil;
            CreateParam[индНомерПП] = locItem;
            CreateParam[индПолноеИмяКласса] = Record.ТестПланПП.Items[locItem].ПолноеИмяКласса;
            CreateParam[индДанныеВЗаписи] = Record.ТестПланПП.Items[locItem].ТестПланМодуля;
            локОбъектТестПлан = Сеанс.Данные.ТестПлан.CreateEx(CreateParam);
            локЭлементНавигатора[типОписание] = локОбъектТестПлан.ОписаниеЭлемента;
            локЭлементНавигатора[типИнтерфейсЭлемента] = локОбъектТестПлан;
            ВетвьТестПланы.Add(локЭлементНавигатора);
            ВетвьТестПлан = ВетвьТестПланы.Items[ВетвьТестПланы.Count];
            ВетвьТестПлан.Image = локОбъектТестПлан.ИконкаЭлемента;
            ВетвьТестПлан.isGroup = true;
            ДобавитьТестОтчеты(locItem, ВетвьТестПлан);
            locItem = locItem + 1;
          end;
          locItem = locItem - 1; --}
        fi;
      end;
    end; --}
    proc ДобавитьГлавнуюВетвь;--{
      var CreateParam: variant[];
      var локОбъектПрограммаСеанса: Сеанс.Данные.Элемент;
      var локЭлементНавигатора: variant[];
      CreateParam[индОписаниеЭлемента] = nil;
      CreateParam[индПолноеИмяКласса] = nil;
      CreateParam[индДанныеВЗаписи] = Record;
      локОбъектПрограммаСеанса = Сеанс.Данные.ПрограммаСеанса.CreateEx(CreateParam);
      локЭлементНавигатора[типОписание] = локОбъектПрограммаСеанса.ОписаниеЭлемента;
      локЭлементНавигатора[типИнтерфейсЭлемента] = локОбъектПрограммаСеанса; --
      тблНавигатор.Root.Add(локЭлементНавигатора);
      ВетвьПрограммаСеанса = тблНавигатор.Root[1];
      ВетвьПрограммаСеанса.Image = локОбъектПрограммаСеанса.ИконкаЭлемента;
      ВетвьПрограммаСеанса.isGroup = true;
      ВетвьПрограммаСеанса.Opened = true;
    end;--}
    ИнициализироватьНавигатор;
    ДобавитьГлавнуюВетвь;
    cc = Record.ТестПланПП.Count;
    for c = 1 .. cc do
      ДобавитьВетвь(c);
    od;
    ОбновитьСтатистикуСеанса;
    ОбновитьИконкиТестПлана;
  end;

  --@doc удаление лишних записей, случано сохранившихся в результате непредвиденных действий
  proc УдалениеСлучайныхЗаписейТестов(var локИмяТестируемогоКласса: string);
    with Query.Create([Т9_Тесты.ТестОтчет]) do
      Filter = 'Сеанс=' + Str(Record) + ' and Пример.ПолноеИмяКласса="' + локИмяТестируемогоКласса + '"';
      if RecordsExists:
        IncludeDeleted = true;
        Select;
        First;
        while not Eof do
          if (not Current.Deleted):
            try Current.Delete; except end;
          fi;
          Next;
        end;
      fi;
    end;
  end;

  proc ВычислитьСведенияОПроектах;
    var p, pp: integer;
    var locProjectName: string[];
    var locProjectInfo: ProjectInfo;
    Record.Проект.Clear;
    pp = ТестПланПП.Count;
    for p = 1 .. pp do
      if (ТестПланПП[p].ТестПланМодуля <> nil):
        СИС2.Функции.AddInArray(locProjectName, ТестПланПП[p].ТестПланМодуля.ИмяПроектаКласса, true);
      fi;
    od;
    for p = 1 .. LengthOfArray(locProjectName) do
      with Record.Проект.AddEx do
        Имя = locProjectName[p];
        locProjectInfo = BaseInfo.ProjectByName[Имя];
        if (locProjectInfo <> nil):
          Наим = locProjectInfo.Title;
          Версия = locProjectInfo.Version;
        fi;
      end;
    od;
    ИзменитьСостояниеЗаписи;
  end;

  proc ВычислитьСведенияОДанных;
    ТестовыеДанные.ИмяИБ = SessionInfo.Infobase.Name;
    ТестовыеДанные.ИмяФБ = Kernel.Settings.CommonFile.ClassInfo.DataBaseName;
    ТестовыеДанные.ИмяСервера = SessionInfo.ServerName;
    ТестовыеДанные.ИмяСервера = if((ТестовыеДанные.ИмяСервера = ''), 'localhost', ТестовыеДанные.ИмяСервера);
  end;

  proc ОбновитьСтатистикуСеанса;
    var s, p, cp, t: integer;
    var locElm: Сеанс.Данные.Элемент;
    var locStorageS,locStorageC,locStorageP: Storage;
    var ItemS,ItemCP,ItemC,ItemP: GridItem;
    func Элемент(GridItem_: GridItem): Сеанс.Данные.Элемент; --{
      var locValue: variant[];
      locValue = GridItem_.Value as variant[];
      Result = locValue[типИнтерфейсЭлемента];
    end; --}
    for s = 1 .. тблНавигатор.Root.Count do
      ItemS = тблНавигатор.Root.Items[s];
      locElm = Элемент(ItemS);
      if (locElm is Сеанс.Данные.ПрограммаСеанса):
        locStorageS = Storage.Create;
        locStorageS.КолТестовВсего = 0;
        locStorageS.КолТестовУспех = 0;
        locStorageS.КолТестовПровал = 0;
        for cp = 1 .. ItemS.Count do
          ItemCP = ItemS.Items[cp];
          locElm = Элемент(ItemCP);
          if (locElm is Сеанс.Данные.ТестПланы):
            ItemC = ItemCP;
            locStorageC = Storage.Create;
            locStorageC.КолТестовВсего = 0;
            locStorageC.КолТестовУспех = 0;
            locStorageC.КолТестовПровал = 0;
            for p = 1 .. ItemC.Count do
              ItemP = ItemC.Items[p];
              locElm = Элемент(ItemP);
              locStorageP = Storage.Create;
              locStorageP.КолТестовВсего = 0;
              locStorageP.КолТестовУспех = 0;
              locStorageP.КолТестовПровал = 0;
              for t = 1 .. ItemP.Count do
                locElm = Элемент(ItemP.Items[t]);
                if (locElm is Сеанс.Данные.ТестОтчет):
                  locStorageP.КолТестовВсего = locStorageP.КолТестовВсего + locElm.КолТестовВсего;
                  locStorageP.КолТестовУспех = locStorageP.КолТестовУспех + locElm.КолТестовУспех;
                  locStorageP.КолТестовПровал = locStorageP.КолТестовПровал + locElm.КолТестовПровал;
                fi;
              od;
              locElm = Элемент(ItemP);
              locElm.УстСтатистику([locStorageP.КолТестовВсего,locStorageP.КолТестовУспех,locStorageP.КолТестовПровал] as integer[]);
              locStorageC.КолТестовВсего = locStorageC.КолТестовВсего + locElm.КолТестовВсего;
              locStorageC.КолТестовУспех = locStorageC.КолТестовУспех + locElm.КолТестовУспех;
              locStorageC.КолТестовПровал = locStorageC.КолТестовПровал + locElm.КолТестовПровал;
            od;
            locElm = Элемент(ItemCP);
            locElm.УстСтатистику([locStorageC.КолТестовВсего,locStorageC.КолТестовУспех,locStorageC.КолТестовПровал] as integer[]);
          elsif (locElm is Сеанс.Данные.ТестПлан):
            ItemP = ItemCP;
            locElm = Элемент(ItemP);
            locStorageP = Storage.Create;
            locStorageP.КолТестовВсего = 0;
            locStorageP.КолТестовУспех = 0;
            locStorageP.КолТестовПровал = 0;
            for t = 1 .. ItemP.Count do
              locElm = Элемент(ItemP.Items[t]);
              if (locElm is Сеанс.Данные.ТестОтчет):
                locStorageP.КолТестовВсего = locStorageP.КолТестовВсего + locElm.КолТестовВсего;
                locStorageP.КолТестовУспех = locStorageP.КолТестовУспех + locElm.КолТестовУспех;
                locStorageP.КолТестовПровал = locStorageP.КолТестовПровал + locElm.КолТестовПровал;
              fi;
            od;
            locElm = Элемент(ItemP);
            locElm.УстСтатистику([locStorageP.КолТестовВсего,locStorageP.КолТестовУспех,locStorageP.КолТестовПровал] as integer[]);
            locElm = Элемент(ItemCP);
            locElm.УстСтатистику([locStorageP.КолТестовВсего,locStorageP.КолТестовУспех,locStorageP.КолТестовПровал] as integer[]);
          fi;
          locStorageS.КолТестовВсего = locStorageS.КолТестовВсего + locElm.КолТестовВсего;
          locStorageS.КолТестовУспех = locStorageS.КолТестовУспех + locElm.КолТестовУспех;
          locStorageS.КолТестовПровал = locStorageS.КолТестовПровал + locElm.КолТестовПровал;
        od;
        locElm = Элемент(ItemS);
        locElm.УстСтатистику([locStorageS.КолТестовВсего,locStorageS.КолТестовУспех,locStorageS.КолТестовПровал] as integer[]);
      fi;
    od;
  end;

  proc ОбновитьИконкиТестПлана(locBranch: GridItem = nil);
    var локЭлемент: variant[];
    var s, ss: integer;
    if (locBranch = nil):
      locBranch = тблНавигатор.Root.Items[1];
    fi;
    локЭлемент = locBranch.Value as variant[];
    if (локЭлемент[типИнтерфейсЭлемента] is Сеанс.Данные.ПрограммаСеанса):
      ss = locBranch.Count;
      for s = 1 .. ss do
        ОбновитьИконкиТестПлана(locBranch.Items[s]);
      od;
    elsif (локЭлемент[типИнтерфейсЭлемента] is Сеанс.Данные.ТестПланы):
      ss = locBranch.Count;
      locBranch.Image = локЭлемент[типИнтерфейсЭлемента].ИконкаЭлемента;
      for s = 1 .. ss do
        locBranch.Image = локЭлемент[типИнтерфейсЭлемента].ИконкаЭлемента;
        ОбновитьИконкиТестПлана(locBranch.Items[s]);
      od;
    elsif (локЭлемент[типИнтерфейсЭлемента] is Сеанс.Данные.ТестПлан):
      ss = locBranch.Count;
      locBranch.Image = локЭлемент[типИнтерфейсЭлемента].ИконкаЭлемента;
      for s = 1 .. ss do
        locBranch.Image = локЭлемент[типИнтерфейсЭлемента].ИконкаЭлемента;
        ОбновитьИконкиТестПлана(locBranch.Items[s]);
      od;
    fi;
  end;

  proc ПонизитьЦветФрейма(locFrame: TemplateFrame; locDelta: integer = 40);
    var locColor, locR, locG, locB, newR, newG, newB: Integer;
      locColor = locFrame.Color;
      SplitColor(locColor, locR, locG, locB);
      newR = if(((locR - locDelta) > 0), Min([255, (locR - locDelta)]), 0);
      newG = if(((locG - locDelta) > 0), Min([255, (locG - locDelta)]), 0);
      newB = if(((locB - locDelta) > 0), Min([255, (locB - locDelta)]), 0);
      locColor = newR + (newG * 256) + (newB * 256 * 256);
      locFrame.Color = locColor;
  end;

  proc ВидФормы;
    var locStyle: TemplateStyle;
    var locSection: TemplateSection;
    if ТестовыеДанные.ВсоставеИБ:
      locStyle = СИС2.Функции.ПолучитьСтильПоИмени(Self.Template, 'Поле вывода');
    else
      locStyle = СИС2.Функции.ПолучитьСтильПоИмени(Self.Template, 'Поле ввода');
    fi;
    with Template.CellByField['ТестовыеДанные.ИмяИБ'] do
      Style = locStyle;
      Button = not ТестовыеДанные.ВсоставеИБ;
    end;
    with Template.CellByField['ТестовыеДанные.ИмяФБ'] do
      Style = locStyle;
      Button = not ТестовыеДанные.ВсоставеИБ;
    end;
    with Template.CellByField['ТестовыеДанные.ИмяСервера'] do
      Style = locStyle;
    end;
    if (Стадия = СтадияСозданиеПрограммы as integer):      кнНачатьСменаСтадииСеанса.Caption = 'Начать сеанс';
    elsif (Стадия = СтадияВыполнениеПрограммы as integer): кнНачатьСменаСтадииСеанса.Caption = 'Завершить сеанс';
    elsif (Стадия = СтадияСеансЗавершен as integer):       кнНачатьСменаСтадииСеанса.Caption = 'Возобновить сеанс';
    elsif (Стадия = СтадияСеансВозобновлен as integer):    кнНачатьСменаСтадииСеанса.Caption = 'Завершить сеанс';
    fi;
    кнТестоваяБаза.Enabled = ТестовыеДанные.ВсоставеИБ and (Стадия = СтадияСозданиеПрограммы as integer);
    with Template.FrameByName['фреймРабЭлемент11'] do--{
      locSection = Section[1];
      locSection.Cell[3,2].Enabled = (Стадия = СтадияСозданиеПрограммы as integer);
    end;--}
    with Template.FrameByName['фреймРабЭлемент21'] do--{
      locSection = CellByField['NN'].Owner;
      locSection.Cell[2,1].Enabled = (Стадия = СтадияСозданиеПрограммы as integer);
      locSection.Cell[5,1].Enabled = not (Стадия = СтадияСеансЗавершен as integer);
      locSection.Cell[6,1].Enabled = not (Стадия = СтадияСеансЗавершен as integer);
      locSection.Cell[7,1].Enabled = (Стадия = СтадияСозданиеПрограммы as integer);
    end;--}
    with Template.FrameByName['фреймРабЭлемент24'] do--{
      CellByField['ТестНеПройден'].Enabled = (Стадия in [СтадияВыполнениеПрограммы as integer,СтадияСеансВозобновлен as integer]);
      CellByField['ТестПройден'].Enabled = (Стадия in [СтадияВыполнениеПрограммы as integer,СтадияСеансВозобновлен as integer]);
      CellByField['Комментарий'].Enabled = not (Стадия = СтадияСозданиеПрограммы as integer);
      --CellByField['Открыть картотеку'].Enabled = (Стадия in [СтадияВыполнениеПрограммы as integer,СтадияСеансВозобновлен as integer]);
      --CellByField['текстЗаключениеТестировщика'].Enabled = not (Стадия = СтадияСозданиеПрограммы as integer);
    end;--}
  end;

  proc ВидСтенда;
    with (АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет) do
      секцСтенд01.Visible = (ТестовыйПример.ТиповойСтенд > 0);
      секцСтенд30.Visible = (ТестовыйПример.ТиповойСтенд in [30,31,32,33,34]);
      секцСтенд30.Cell[2,1].Enabled = (Стадия in [СтадияВыполнениеПрограммы as integer,СтадияСеансВозобновлен as integer]);
      секцСтенд30.CellByField['ТестФильтр'].Enabled = (ТестовыйПример.ТиповойСтенд in [32,34]);
      секцСтенд30.Row[3].Visible = (ТестовыйПример.ТиповойСтенд in [32,34]);
    end;
  end;
--}}

--{{ Обработчики событий шаблона

  proc шаблон_ПриСоздании(Context: Variant);
    inherited шаблон_ПриСоздании(Context);
    ИнициализироватьИконки;
  end;

  proc шаблон_ПриОткрытии(Create :Logical);
    inherited шаблон_ПриОткрытии(Create); --
    тблНавигатор.Align = true;
    with фреймРабЭлемент1 do
      ShowTabs = false;
      AutoSize = true;
    end;
    with фреймРабЭлемент2 do
      ShowTabs = false;
      AutoSize = false;
    end;
    ПоказыватьЗебру = true; --
    ПонизитьЦветФрейма(Template.FrameByName['фреймНавигатор1']);
    ПонизитьЦветФрейма(Template.FrameByName['фреймРабЭлемент11']);
    ПонизитьЦветФрейма(Template.FrameByName['фреймРабЭлемент12']);
    ПонизитьЦветФрейма(Template.FrameByName['фреймРабЭлемент13']);
    ПонизитьЦветФрейма(Template.FrameByName['фреймРабЭлемент14']);
    Template.FrameByName['фреймРеквизитыДоп'].Visible = not фреймРеквизитыДопСкрыт;
  end;

  proc шаблон_ПриСчитывании;
    inherited шаблон_ПриСчитывании;
    --ОбновитьДеревоДанных;
    ЗаполнитьНавигатор;
    локТранзакция = Transaction.Create([Т9_Тесты.СеансТестирования,Т9_Тесты.ТестОтчет]); --
    тблНавигатор.SetFocus;
    ВидФормы;
  end;

  func шаблон_ПриЗаписи :Logical;
    if СИС2.ФункцииДокумента.RecordEdited(Record):
      Record.Post;
      локТранзакция.Apply(true);
    fi;
  end;

  func шаблон_ПриОтмене :Logical;
    if СИС2.ФункцииДокумента.RecordEdited(Record):
      Record.Cancel;
      локТранзакция.Cancel;
      if (not БланкЗакрывается) and (not Window.Closing):
        Шаблон_ПриСчитывании;
      fi;
      --Result = inherited шаблон_ПриОтмене;
    fi;
  end;
--}}

--{{ Обработчики событий клеток шаблона

  func Поле_ПриНажатии (Cell: TemplateCell; Action: Template.ClickTypes): Logical;
    var локЗаписьТестПлана: Т9_Тесты.ТестПланМодуля;
    var локЭлемент: variant[];
    var локНаимТестПлана: string;
    var locValueL: logical;
    var locCardFileClass1,locCardFileClass2: Class CardForm;
    if (Cell.Contents = 'ТестовыеДанные.ВсоставеИБ'):
      ТестовыеДанные.ВсоставеИБ = not ТестовыеДанные.ВсоставеИБ;
      if ТестовыеДанные.ВсоставеИБ:
        ВычислитьСведенияОДанных;
      fi;
      ВидФормы;
    elsif (Cell.Contents = '+') and (Cell.Owner = секцСценарий1ЗаголовокТаблицы):--добавление тест-плана класса в тест-план из заголовка таблицы
      if CmOk = ДобавитьТестПлан(Cell, локЗаписьТестПлана, true):
        АктуализироватьТестПримеры(локЗаписьТестПлана);
        ЗаполнитьНавигатор;
      fi;
    elsif (Cell.Contents = '+') and (Cell.Owner = секцСценарий1): --добавление тест-плана класса в тест-план из строки таблицы
      if CmOk = ДобавитьТестПлан(Cell, локЗаписьТестПлана, false):
        АктуализироватьТестПримеры(локЗаписьТестПлана);
        ЗаполнитьНавигатор;
      fi;
    elsif (Cell.Contents = 'x') and (Cell.Owner = секцСценарий1): --удаление строки из тест-плана (без удаления тест-плана класса из справочника)
      УдалитьТестПримеры(ТестПланПП[Cell.Frame].ТестПланМодуля);
      УдалитьТестПлан(Cell);
      ЗаполнитьНавигатор;
    elsif (Cell.Contents = '5') and (Cell.Owner in [секцСценарий1,секцСценарий2]): --перемещение строк вверх
      ПоднятьТестПлан(Cell);
      ЗаполнитьНавигатор;
    elsif (Cell.Contents = '6') and (Cell.Owner in [секцСценарий1,секцСценарий2]): --перемещение строк вниз
      ОпуститьТестПлан(Cell);
      ЗаполнитьНавигатор;
    elsif (Cell.Contents = '...') and (Cell.Owner in [секцСценарий1,секцСценарий2]): --карточка тест-плана класса
      ПоказатьТестПлан(Cell);
      ЗаполнитьНавигатор;
    elsif (Cell.Contents = 'Предыдущий тест'):
      тблНавигатор.SetFocus;
      Self.Template.BeginModify;
      тблНавигатор.Current = АктивныйЭлементНавигатора;
      ExecuteCommand('Kernel.Move.Up', false);
      Sleep(0.5);
      Self.Template.EndModify;
    elsif (Cell.Contents = 'Следующий тест'):
      тблНавигатор.SetFocus;
      Self.Template.BeginModify;
      локЭлемент = АктивныйЭлементНавигатора.Parent.Value as variant[];
      локНаимТестПлана = локЭлемент[типОписание] as string;
      тблНавигатор.Current = АктивныйЭлементНавигатора;
      ExecuteCommand('Kernel.Move.Down', false);
      Sleep(0.5);
      локЭлемент = тблНавигатор.Current.Value as variant[];
      if not (локЭлемент[типИнтерфейсЭлемента] is Сеанс.Данные.ТестОтчет):
        Message('В тест-плане <' + локНаимТестПлана + '> выполнены все тесты.');
      fi;
      Self.Template.EndModify;
    elsif (Cell.Contents = 'ТестПройден'):
      локЭлемент = АктивныйЭлементНавигатора.Value as variant[];
      if (АктивныйЭлементДанных <> nil):
        locValueL = (АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет).ТестПройден;
        (АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет).УстТестПройден(not locValueL);
        локЭлемент = [локЭлемент[1],АктивныйЭлементДанных];
        АктивныйЭлементНавигатора.Value = локЭлемент;
        АктивныйЭлементНавигатора.Image = АктивныйЭлементДанных.ИконкаЭлемента;
      fi;
      ОбновитьСтатистикуСеанса;
      ОбновитьИконкиТестПлана;
      ИзменитьСостояниеЗаписи;
    elsif (Cell.Contents = 'ТестНеПройден'):
      локЭлемент = АктивныйЭлементНавигатора.Value as variant[];
      if (АктивныйЭлементДанных <> nil):
        locValueL = (АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет).ТестПровален;
        (АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет).УстТестПровален(not locValueL);
        локЭлемент = [локЭлемент[1],АктивныйЭлементДанных];
        АктивныйЭлементНавигатора.Value = локЭлемент;
        АктивныйЭлементНавигатора.Image = АктивныйЭлементДанных.ИконкаЭлемента;
      fi;
      ОбновитьСтатистикуСеанса;
      ОбновитьИконкиТестПлана;
      ИзменитьСостояниеЗаписи;
    elsif (Cell.Contents = 'Редактировать'):
      if (АктивныйЭлементДанных <> nil):
        if (АктивныйЭлементДанных.ДанныеВЗаписи <> nil):
          if (АктивныйЭлементДанных.ДанныеВЗаписи.Пример <> nil):
            if CmOk = OpenBlankEditor('Тесты.редТестовыйПример', АктивныйЭлементДанных.ДанныеВЗаписи.Пример, Window.ModalWindow):
              АктивныйЭлементДанных.Evaluate('УстОписаниеПримера');
              локЭлемент = АктивныйЭлементНавигатора.Value as variant[];
              локЭлемент[1] = АктивныйЭлементДанных.ОписаниеЭлемента;
              АктивныйЭлементНавигатора.Value = локЭлемент;
              ВидСтенда;
            fi;
          fi;
        fi;
      fi;
    elsif (Cell.Contents = 'Открыть картотеку'):
      if (АктивныйЭлементДанных <> nil) and (АктивныйЭлементДанных.ДанныеВЗаписи <> nil) and (АктивныйЭлементДанных.ДанныеВЗаписи.Пример <> nil):
        if    (АктивныйЭлементДанных.ДанныеВЗаписи.Пример.ТиповойСтенд = типСтендВсеКартотеки):
          locCardFileClass1 = FindClass(АктивныйЭлементДанных.ДанныеВЗаписи.Пример.ПолноеИмяКласса);
          if cmOk = ChooseCardFile(locCardFileClass2):
            if (locCardFileClass1 = locCardFileClass2):
              locCardFileClass2.CreateVisible;
            else
              Message('Выбрана картотека, не входящая в тест-план!');
            fi;
          fi;
        elsif (АктивныйЭлементДанных.ДанныеВЗаписи.Пример.ТиповойСтенд = типСтендКартотекаДБФ):
          OpenCardfile(АктивныйЭлементДанных.ДанныеВЗаписи.Пример.ПолноеИмяКласса, , , Window.ChildWindow);
        elsif (АктивныйЭлементДанных.ДанныеВЗаписи.Пример.ТиповойСтенд = типСтендКартотекаДДФ):
          OpenCardfile(АктивныйЭлементДанных.ДанныеВЗаписи.Пример.ПолноеИмяКласса, , АктивныйЭлементДанных.ДанныеВЗаписи.ТестФильтр, Window.ChildWindow);
        elsif (АктивныйЭлементДанных.ДанныеВЗаписи.Пример.ТиповойСтенд = типСтендКартотекаМБФ):
          OpenCardfile(АктивныйЭлементДанных.ДанныеВЗаписи.Пример.ПолноеИмяКласса, , , Window.ModalWindow);
        elsif (АктивныйЭлементДанных.ДанныеВЗаписи.Пример.ТиповойСтенд = типСтендКартотекаМДФ):
          OpenCardfile(АктивныйЭлементДанных.ДанныеВЗаписи.Пример.ПолноеИмяКласса, , АктивныйЭлементДанных.ДанныеВЗаписи.ТестФильтр, Window.ModalWindow);
        fi;
      fi;
    fi;
  end;

  func Поле_ПриВходе(Cell: TemplateCell; Index: Integer; Action: Template.EnterTypes): Logical;
    if (Cell.Contents = 'Комментарий') and (Action = Template.Clear):
      if (АктивныйЭлементДанных <> nil):
        (АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет).УстЗаключение(nil);
      fi;
    elsif (Cell.Contents = 'ТестФильтр') and (Action = Template.Clear):
      if (АктивныйЭлементДанных <> nil):
        (АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет).УстТестФильтр(nil);
      fi;
    else
      Result = true;
    fi;
  end;

  func Поле_ПриОбзоре(Cell: TemplateCell; Value: Variant; var NewValue: Variant): Logical;
    var locFilePath: string;
    var locExtensions: string;
    if (Cell.Contents = 'ТестовыеДанные.ИмяИБ'):
      locExtensions = 'Файлы инф.б.|*.idb|Все файлы|*.*';
      if cmOk = ChooseFile(locFilePath, '', locExtensions):
        ТестовыеДанные.ИмяИБ = locFilePath;
        Template.EndEdit;
      fi;
    elsif (Cell.Contents = 'ТестовыеДанные.ИмяФБ'):
      if cmOk = ChooseFolder(locFilePath, ''):
        ТестовыеДанные.ИмяФБ = locFilePath;
        Template.EndEdit;
      fi;
    fi;
  end;


  func Поле_ПриВводе(Cell: TemplateCell; Value: Variant): Logical;
    if (Cell.Contents = 'Комментарий'):
      if (АктивныйЭлементДанных <> nil):
        (АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет).УстЗаключение(Value);
      fi;
    elsif (Cell.Contents = 'ТестФильтр'):
      if (АктивныйЭлементДанных <> nil):
        (АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет).УстТестФильтр(Value);
      fi;
    fi;
  end;


  func Поле_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    var Index: Integer;
    var locIsGroup: logical;
    var locDiscription: string;
    var локПозицииПрограммы: Subtable;
    var локНаим: string;
    func ЭлементПрограммаСеанса: Сеанс.Данные.Элемент; --{
      var locValue: variant[];
      locValue = тблНавигатор.Root.Items[1].Value as variant[];
      Result = locValue[типИнтерфейсЭлемента];
    end; --}
    if (Cell.Contents = 'ТестПланМодуля.Наим'):--{
      локПозицииПрограммы = ТестПланПП.CreateSubtableView(Cell.Owner.SubtableFilter, '');
      Index = локПозицииПрограммы.IndexByNumber[Cell.Frame] + 1;
      locIsGroup = (ТестПланПП[Index].ТестПланМодуля = nil) and (ТестПланПП[Index].ПолноеИмяКласса <> nil);
      locDiscription = Библио.ОписаниеКлассаПоИмени(ТестПланПП[Index].ПолноеИмяКласса);
      locDiscription = if((locDiscription <> nil), locDiscription, 'НЕВЕРНОЕ ИМЯ КЛАССА');
      if (locIsGroup):
        Result = '<b+>' + locDiscription;
      else
        if (ТестПланПП[Index].inGroup) and (ТестПланПП[Index].ТестПланМодуля <> nil):
          Result = RepStr(' ', 8) + ТестПланПП[Index].ТестПланМодуля.Наим;
        elsif (not ТестПланПП[Index].inGroup):
          Result = locDiscription;
        fi;
      fi;--}
    elsif (Cell.Contents = 'Имя') and (Cell.Owner.Name = 'секцИнфОпроектах'):--{
      локНаим = Record.Проект[Cell.Frame].Наим;
      Result = if((локНаим = nil), Value, Value + ' <cf:GrayText>(' + локНаим + ')');--}
    elsif (Cell.Contents = 'NN') and (Cell.Owner = секцСценарий2):--{
      локПозицииПрограммы = ТестПланПП.CreateSubtableView(Cell.Owner.SubtableFilter, '');
      Result = (локПозицииПрограммы.IndexByNumber[Cell.Frame] + 1);--}
    elsif (Cell.Contents = 'Пример.Наим'):--{
      Index = Cell.Frame;
      Result = Тест_[Index].Пример.Наим;--}
    elsif (Cell.Contents = 'NN') and (Cell.Owner = секцСценарий3):--{
      Index = Cell.Frame;
      Result = Тест_[Index].НомерПП;--}
    elsif (Cell.Contents = 'Наим'):--{
      Result = if((АктивныйЭлементДанных <> nil), (АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет).Наим, '');--}
    elsif (Cell.Contents = 'СценарийТеста'):--{
      Result = if((АктивныйЭлементДанных <> nil), (АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет).СценарийТеста, '');--}
    elsif (Cell.Contents = 'ОжидаемыйРезультат'):--{
      Result = if((АктивныйЭлементДанных <> nil), (АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет).ОжидаемыйРезультат, '');--}
    elsif (Cell.Contents = 'ТестПройден'):--{
      Result = if((АктивныйЭлементДанных <> nil), ((АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет).Результат = 1), false); --}
    elsif (Cell.Contents = 'ТестНеПройден'):--{
      Result = if((АктивныйЭлементДанных <> nil), ((АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет).Результат = -1), false);--}
    elsif (Cell.Contents = 'Комментарий'):--{
      Result = if((АктивныйЭлементДанных <> nil), (АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет).Заключение, '');--}
    elsif (Cell.Contents = 'ТестФильтр'):--{
      Result = if((АктивныйЭлементДанных <> nil), (АктивныйЭлементДанных as Сеанс.Данные.ТестОтчет).ТестФильтр, '');--}
    --Статистика
    elsif (Cell.Contents = 'AllCount_csn'): Result = if(ЭлементПрограммаСеанса <> nil, ЭлементПрограммаСеанса.КолТестовВсего, 0);
    elsif (Cell.Contents = 'Plus_csn'):     Result = if(ЭлементПрограммаСеанса <> nil, ЭлементПрограммаСеанса.КолТестовУспех, 0);
    elsif (Cell.Contents = 'Minus_csn'):    Result = if(ЭлементПрограммаСеанса <> nil, ЭлементПрограммаСеанса.КолТестовПровал, 0);
    elsif (Cell.Contents = 'Nil_csn'):      Result = if(ЭлементПрограммаСеанса <> nil, ЭлементПрограммаСеанса.КолТестовБезРезультата, 0);
    elsif (Cell.Contents = 'AllCount_psn'): Result = if(ЭлементПрограммаСеанса <> nil, ЭлементПрограммаСеанса.ПрцТестовВсего, 0);
    elsif (Cell.Contents = 'Plus_psn'):     Result = if(ЭлементПрограммаСеанса <> nil, ЭлементПрограммаСеанса.ПрцТестовУспех, 0);
    elsif (Cell.Contents = 'Minus_psn'):    Result = if(ЭлементПрограммаСеанса <> nil, ЭлементПрограммаСеанса.ПрцТестовПровал, 0);
    elsif (Cell.Contents = 'Nil_psn'):      Result = if(ЭлементПрограммаСеанса <> nil, ЭлементПрограммаСеанса.ПрцТестовБезРезультата, 0);

    elsif (Cell.Contents = 'AllCount_ccl'): Result = if(АктивныйЭлементКласс <> nil, АктивныйЭлементКласс.КолТестовВсего, 0);
    elsif (Cell.Contents = 'Plus_ccl'):     Result = if(АктивныйЭлементКласс <> nil, АктивныйЭлементКласс.КолТестовУспех, 0);
    elsif (Cell.Contents = 'Minus_ccl'):    Result = if(АктивныйЭлементКласс <> nil, АктивныйЭлементКласс.КолТестовПровал, 0);
    elsif (Cell.Contents = 'Nil_ccl'):      Result = if(АктивныйЭлементКласс <> nil, АктивныйЭлементКласс.КолТестовБезРезультата, 0);
    elsif (Cell.Contents = 'AllCount_pcl'): Result = if(АктивныйЭлементКласс <> nil, АктивныйЭлементКласс.ПрцТестовВсего, 0);
    elsif (Cell.Contents = 'Plus_pcl'):     Result = if(АктивныйЭлементКласс <> nil, АктивныйЭлементКласс.ПрцТестовУспех, 0);
    elsif (Cell.Contents = 'Minus_pcl'):    Result = if(АктивныйЭлементКласс <> nil, АктивныйЭлементКласс.ПрцТестовПровал, 0);
    elsif (Cell.Contents = 'Nil_pcl'):      Result = if(АктивныйЭлементКласс <> nil, АктивныйЭлементКласс.ПрцТестовБезРезультата, 0);
    fi;
  end;

  func ПолеЗаголовокОкнаФормы_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): String;
    Window.Caption = 'Сеанс тестирования';
    if (Стадия = Константы.СтадияСозданиеПрограммы): Result = 'Сеанс' + Chr(13) + '<s-><s-><cf:GrayText>(создание программы тестирования)';
    elsif (Стадия = Константы.СтадияВыполнениеПрограммы): Result = 'Сеанс' + Chr(13) + '<s-><s-><cf:GrayText>(выполнение программы тестирования)';
    elsif (Стадия = Константы.СтадияСеансВозобновлен): Result = 'Сеанс' + Chr(13) + '<s-><s-><cf:GrayText>(выполнение программы тестирования возобновлено)';
    elsif (Стадия = Константы.СтадияСеансЗавершен): Result = 'Сеанс' + Chr(13) + '<s-><s-><cf:GrayText>(выполнение программы тестирования завершено)';
    fi;
  end;

  proc Поле_ПриРисовании(Cell: TemplateCell; Selected: Logical; var Color: Integer; var FieldColor: Integer; Font: Font);
    if ПоказыватьЗебру and (Cell.Owner = секцСценарий1):
      Поле_ПриРисованииЭффектЗебры(Cell, Selected, Color, FieldColor, Font);
    elsif ПоказыватьЗебру and (Cell.Owner = секцСценарий2):
      Поле_ПриРисованииЭффектЗебры(Cell, Selected, Color, FieldColor, Font);
    elsif ПоказыватьЗебру and (Cell.Owner = секцСценарий3):
      Поле_ПриРисованииЭффектЗебры(Cell, Selected, Color, FieldColor, Font);
    fi;
  end;
--}}

--{{ Обработчики событий прочих объектов шаблона

  proc кнПриНажатии (Sender: Button);
    var locPrjCrd: Тесты.картПроектСеанса;
    var locSesCrd: Тесты.картСеанс;
    var локЗаписьПроектаСеанса: Т9_Тесты.ПроектСеанса;
    var локЗаписьСеанса: Т9_Тесты.СеансТестирования;
    var локПолноеИмяКласса: string;
    var локТестПланМодуля: Т9_Тесты.ТестПланМодуля;
    var locInGroup: logical;
    var локРешение: integer;
    var p, pp: integer;

    func ВсеРеквизитыЗаполнены: logical;--{
      var t, tt: integer;
      --{ проверка раздела <Сведения о проектах>
      tt = Record.Проект.Count;
      if (tt > 0):
        Result = true;
        for t = 1 .. tt do
          if (nil in [Record.Проект[t].Имя, Record.Проект[t].Версия, Record.Проект[t].Ревизия]):
            Result = false;
            Break;
          fi;
        od;
        if (not Result):
          Message('Пожалуйста, проверьте полноту данных раздела <Сведения о проектах>!');
        fi;
      else
        Message('Пожалуйста, проверьте полноту данных раздела <Сведения о проектах>!');
        ВычислитьСведенияОПроектах;
        Template.FrameByName['фреймРеквизитыДоп'].Visible = true;
      fi;--}
      --{ проверка раздела <Сведения о тестовых данных>
      if Result:
        Result = not(nil in [ТестовыеДанные.ИмяИБ, ТестовыеДанные.ИмяФБ, ТестовыеДанные.ИмяСервера]);
        if not Result:
          Message('Пожалуйста, проверьте полноту данных раздела <Сведения о тестовых данных>!');
          ВычислитьСведенияОДанных;
          Template.FrameByName['фреймРеквизитыДоп'].Visible = true;
        fi;
      fi;--}
    end;--}

    if (Sender.Name = 'кнСоздатьПрограмму'): --{
      if (ТестПланПП.Count = 0): -- загрузка проекта сеанса допускается только при пустой подтаблице тест-планов
        локРешение = Enquiry (,'Загрузка базовой программы тестирования:',['По шаблону','По образцу','Отмена'],);
        if (локРешение = 1): --{ По шаблону
          locPrjCrd = Тесты.картПроектСеанса.Create;
          if CmOk = locPrjCrd.ShowEx(локЗаписьПроектаСеанса, '', Window.ModalWindow):
            Наим = локЗаписьПроектаСеанса.Наим;
            pp = локЗаписьПроектаСеанса.ТестПланПП.Count;
            for p = 1 .. pp do
              локПолноеИмяКласса = локЗаписьПроектаСеанса.ТестПланПП[p].ПолноеИмяКласса;
              локТестПланМодуля = локЗаписьПроектаСеанса.ТестПланПП[p].ТестПланМодуля;
              locInGroup = локЗаписьПроектаСеанса.ТестПланПП[p].InGroup;
              with ТестПланПП.Insert(p) do
                if (локТестПланМодуля = nil): -- это группа тест-планов
                  ПолноеИмяКласса = локПолноеИмяКласса;
                else -- это тест-план
                  ПолноеИмяКласса = локПолноеИмяКласса;
                  ТестПланМодуля = локТестПланМодуля;
                  inGroup = locInGroup;
                  АктуализироватьТестПримеры(локТестПланМодуля);
--                  tt = локТестПланМодуля.ТестПП.Count;
--                  for t = 1 .. tt do
--                    локТест = Т9_Тесты.Тест.Create;
--                    локТест.Сеанс = Record;
--                    локТест.ТестПлан = локТестПланМодуля;
--                    локТест.Пример = локТестПланМодуля.ТестПП[t].Пример;
--                    локТест.НомерПП = t;
--                    локТест.Post;
--                  od;
                fi;
              end;
            od;
            ЗаполнитьНавигатор;
            ИзменитьСостояниеЗаписи;
          fi;--}
        elsif (локРешение = 2): --{ По образцу
          locSesCrd = Тесты.картСеанс.Create;
          if CmOk = locSesCrd.ShowEx(локЗаписьСеанса, 'Стадия=' + Str(Константы.СтадияСеансЗавершен), Window.ModalWindow):
            Наим = локЗаписьСеанса.Наим;
            pp = локЗаписьСеанса.ТестПланПП.Count;
            for p = 1 .. pp do
              локПолноеИмяКласса = локЗаписьСеанса.ТестПланПП[p].ПолноеИмяКласса;
              локТестПланМодуля = локЗаписьСеанса.ТестПланПП[p].ТестПланМодуля;
              locInGroup = локЗаписьСеанса.ТестПланПП[p].InGroup;
              with ТестПланПП.Insert(p) do
                if (локТестПланМодуля = nil): -- это группа тест-планов
                  ПолноеИмяКласса = локПолноеИмяКласса;
                else -- это тест-план
                  ПолноеИмяКласса = локПолноеИмяКласса;
                  ТестПланМодуля = локТестПланМодуля;
                  inGroup = locInGroup;
                  АктуализироватьТестПримеры(локТестПланМодуля);
--                  tt = локТестПланМодуля.ТестПП.Count;
--                  for t = 1 .. tt do
--                    локТест = Т9_Тесты.Тест.Create;
--                    локТест.Сеанс = Record;
--                    локТест.ТестПлан = локТестПланМодуля;
--                    локТест.Пример = локТестПланМодуля.ТестПП[t].Приме??;
--                    локТест.НомерПП = t;
--                    локТест.Post;
--                  od;
                fi;
              end;
            od;
            ЗаполнитьНавигатор;
            ИзменитьСостояниеЗаписи;
          fi;--}
        fi;
      fi;
    --}
    elsif (Sender.Name = 'кнСоставПроектов'): --{
      ВычислитьСведенияОПроектах;--}
    elsif (Sender.Name = 'кнТестоваяБаза'): --{
      ВычислитьСведенияОДанных;--}
    elsif (Sender.Name = 'кнНачатьСменаСтадииСеанса'): --{
      if (Стадия = СтадияСозданиеПрограммы as integer): -- переход в стадию выполнения программы тестирования
        if ВсеРеквизитыЗаполнены:
          if CmOk = EnqOkCancel('После начала выполнения программы тестирования добавление/удаление тест-планов и тестовых примеров будет невозможно. Продолжить?'):
            Стадия = СтадияВыполнениеПрограммы as integer;
            ДатаНачала = Now;
          fi;
        fi;
      elsif (Стадия = СтадияВыполнениеПрограммы as integer): -- переход в стадию "завершено" из стадии "выполняется"
        Стадия = СтадияСеансЗавершен as integer;
        ДатаОкончания = Now;
      elsif (Стадия = СтадияСеансЗавершен as integer):  -- переход в стадию "возобновлено" --
        Стадия = СтадияСеансВозобновлен as integer;
        ДатаОкончания = nil as date;
      elsif (Стадия = СтадияСеансВозобновлен as integer): -- переход в стадию "завершено" из стадии "возобновлено"
        Стадия = СтадияСеансЗавершен as integer;
        ДатаОкончания = Now;
      fi;
      ИзменитьСостояниеЗаписи;
      ВидФормы;
      --}
    fi;
  end;

  proc тблНавигатор_ПриПеремещении(Sender: Grid);
    var локЭлемент: variant[];
    АктивныйЭлементНавигатора = Sender.Current;
    локЭлемент = if((АктивныйЭлементНавигатора <> nil), АктивныйЭлементНавигатора.Value, nil) as variant[];
    АктивныйЭлементДанных = if((локЭлемент <> nil), локЭлемент[типИнтерфейсЭлемента] as Сеанс.Данные.Элемент, nil);
    if (АктивныйЭлементДанных is Сеанс.Данные.ПрограммаСеанса): --{
      фреймРабЭлемент1.CurrentFrame = фреймРабЭлемент1.Frame[1];
      фреймРабЭлемент1.CurrentFrame.Visible = true;
      фреймРабЭлемент2.CurrentFrame = фреймРабЭлемент2.Frame[1];
      фреймРабЭлемент2.CurrentFrame.Visible = true;
      АктивныйЭлементКласс = nil; --}
    elsif (АктивныйЭлементДанных is Сеанс.Данные.ТестПланы):
      секцСценарий2.SubtableFilter = 'ПолноеИмяКласса="' + (АктивныйЭлементДанных.ПолноеИмяКласса) + '"'; --inGroup and
      фреймРабЭлемент1.CurrentFrame = фреймРабЭлемент1.Frame[2];
      фреймРабЭлемент1.CurrentFrame.Visible = true;
      фреймРабЭлемент2.CurrentFrame = фреймРабЭлемент2.Frame[2];
      фреймРабЭлемент2.CurrentFrame.Visible = true;
      АктивныйЭлементКласс = АктивныйЭлементДанных;
    elsif (АктивныйЭлементДанных is Сеанс.Данные.ТестПлан):
      ПрочитатьТестПримеры(АктивныйЭлементДанных.ДанныеВЗаписи as Т9_Тесты.ТестПланМодуля);
      секцСценарий3.Count = LengthOfArray(Тест_);
      фреймРабЭлемент1.CurrentFrame = фреймРабЭлемент1.Frame[3];
      фреймРабЭлемент1.CurrentFrame.Visible = true;
      фреймРабЭлемент2.CurrentFrame = фреймРабЭлемент2.Frame[3];
      фреймРабЭлемент2.CurrentFrame.Visible = true;
      локЭлемент = if((Sender.Current.Parent <> nil), Sender.Current.Parent.Value, nil) as variant[];
      if (локЭлемент[типИнтерфейсЭлемента] is Сеанс.Данные.ТестПланы):
        АктивныйЭлементКласс = локЭлемент[типИнтерфейсЭлемента] as Сеанс.Данные.Элемент;
      else
        АктивныйЭлементКласс = АктивныйЭлементДанных;
      fi;
    elsif (АктивныйЭлементДанных is Сеанс.Данные.ТестОтчет):
      фреймРабЭлемент1.CurrentFrame = фреймРабЭлемент1.Frame[4];
      фреймРабЭлемент1.CurrentFrame.Visible = true;
      фреймРабЭлемент2.CurrentFrame = фреймРабЭлемент2.Frame[4];
      фреймРабЭлемент2.CurrentFrame.Visible = true;
      локЭлемент = if((Sender.Current.Parent.Parent <> nil), Sender.Current.Parent.Parent.Value, nil) as variant[];
      if (локЭлемент[типИнтерфейсЭлемента] is Сеанс.Данные.ТестПланы):
        АктивныйЭлементКласс = локЭлемент[типИнтерфейсЭлемента] as Сеанс.Данные.Элемент;
      else
        локЭлемент = if((Sender.Current.Parent <> nil), Sender.Current.Parent.Value, nil) as variant[];
        АктивныйЭлементКласс = локЭлемент[типИнтерфейсЭлемента] as Сеанс.Данные.Элемент;
      fi;
      ВидСтенда;
    fi;
  end;

  func фреймПриСкрытии(locFrame: TemplateFrame): Logical;
    if (locFrame.Name = 'фреймРеквизитыДоп'):
      фреймРеквизитыДопСкрыт = locFrame.Visible;
      Result = true;
    fi;
  end;

--}}


end