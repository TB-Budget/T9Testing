--{{ Т9_Тесты - проект для тестирования проектов, созданных на платформе Т9 (c) ТБ.Бюджет, 2015
--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
--}

--class inherited СИС2.БазовыйБланкРедактор "Сеанс тестирования", editor СеансТестирования;
class inherited Тесты.редПроектСеанса "Сеанс тестирования", editor СеансТестирования;

import СИС2 classes Функции, СтроковыеФункции;
import classes Константы;

  inclass private

  type типЭлементаНавигатора = (типПрограммаСеанса = 0, типПрограммаКласса, типТестПлан, типТестПример);
  type типДанныхЭлементаНавигатора = (типОписание = 1, типТипЭлемента, типНомерПп, типИдентификатор, типКлючЭлемента);

  stored var фреймРеквизитыДопСкрыт: logical;

  inobject private

  var фреймДопСервис: TemplateFrame;
  var тблНавигатор: Grid;
  var фреймРабЭлемент1: TemplateFrame;
  var фреймРабЭлемент2: TemplateFrame;

  var кнТестоваяБаза: Button;
  var кнНачатьСменаСтадииСеанса: Button;

  var секцСценарий1ЗаголовокТаблицы: TemplateSection;
  var секцСценарий1: TemplateSection;
  var секцСценарий2ЗаголовокТаблицы: TemplateSection;
  var секцСценарий2: TemplateSection;
  var секцСценарий3: TemplateSection;

  var NN: integer[] = $;
  var Тест_: Т9_Тесты.ТестОтчет[];
  var ТекущийТест_: Т9_Тесты.ТестОтчет;
  var ТекущаяВетвь_: GridItem;

  var локТранзакция: Transaction;

  type ImageType = (iProject = 1, iClassGray, iClassGreen, iClassYellow, iUnCheck, iCheckGreen, iCheckRed);
  var ImageOfObject: Image[];

--{{ Вспомогательные методы
  proc ИнициализироватьЭлементыЦветаКоторыхМожноМенять;
    ЭлементыЦветаКоторыхМожноМенять = [[Self.Template,фреймДопСервис],[ОсновнойФрейм]];
  end;

  proc ИнициализироватьИконки;--{
    ImageOfObject = nil;
    ImageOfObject[iProject]     = Image.Create; ImageOfObject[iProject].LoadFromFile("%Projects%\Т9_Тесты\Приложения\Иконки\Project.ico");
    ImageOfObject[iClassGray]   = Image.Create; ImageOfObject[iClassGray].LoadFromFile("%Projects%\Т9_Тесты\Приложения\Иконки\Plugin\Gray.ico");
    ImageOfObject[iClassYellow] = Image.Create; ImageOfObject[iClassYellow].LoadFromFile("%Projects%\Т9_Тесты\Приложения\Иконки\Plugin\Yellow.ico");
    ImageOfObject[iClassGreen]  = Image.Create; ImageOfObject[iClassGreen].LoadFromFile("%Projects%\Т9_Тесты\Приложения\Иконки\Plugin\Green.ico");
    ImageOfObject[iUnCheck]     = Image.Create; ImageOfObject[iUnCheck].LoadFromFile("%Projects%\Т9_Тесты\Приложения\Иконки\bullet_white.ico");
    ImageOfObject[iCheckGreen]  = Image.Create; ImageOfObject[iCheckGreen].LoadFromFile("%Projects%\Т9_Тесты\Приложения\Иконки\bullet_green.ico");
    ImageOfObject[iCheckRed]    = Image.Create; ImageOfObject[iCheckRed].LoadFromFile("%Projects%\Т9_Тесты\Приложения\Иконки\bullet_red.ico");
  end;--}

  proc ИзменитьСостояниеЗаписи;
    СИС2.ФункцииДокумента.RecordEdit(Record);
    if not Record.Modified then
      Record.Modified = true;
    end;
  end;

  proc АктуализироватьТестПримеры(локТестПланКласса: Т9_Тесты.ТестПланКласса); -- по записи тест-плана создает тесты для текущего сеанса, отсутствующие в базе
    var t, tt: integer;
    var локТестовыйПример: Т9_Тесты.ТестовыйПример;
    var локТест: Т9_Тесты.ТестОтчет;
    var ТестСуществует: logical;
    func ТребуетсяСозданиеТеста: logical;--{
      var locFlt: string[];
      if (локТестовыйПример <> nil):
        locFlt[1] = 'Сеанс=' + Str(Record);
        locFlt[2] = 'ТестПлан=' + Str(локТестПланКласса);
        locFlt[3] = 'Пример=' + Str(локТестовыйПример);
        with Query.Create([Т9_Тесты.ТестОтчет]) do
          Filter = СложитьСтрокиФильтраПоИ(locFlt);
          ТестСуществует = RecordsExists;
          if ТестСуществует:
            Select;
            локТест = Current;
          fi;
          Result = not ТестСуществует;
        end;
      fi;
    end;--}
    tt = локТестПланКласса.ТестПП.Count;
    for t = 1 .. tt do
      локТестовыйПример = локТестПланКласса.ТестПП[t].Пример;
      ТестСуществует = false;
      if ТребуетсяСозданиеТеста:
        локТест = Т9_Тесты.ТестОтчет.Create;
        локТест.Сеанс = Record;
        локТест.ТестПлан = локТестПланКласса;
        локТест.Пример = локТестовыйПример;
        локТест.НомерПП = t;
        локТест.Post;
      elsif (not ТребуетсяСозданиеТеста) and ТестСуществует:
        локТест.НомерПП = t;
      fi;
    od;
  end;

  proc УдалитьТестПримеры(локТестПланКласса: Т9_Тесты.ТестПланКласса); -- по записи тест-плана удалят тесты для текущего сеанса
    var locFlt: string[];
    with Query.Create([Т9_Тесты.ТестОтчет]) do
      locFlt[1] = 'Сеанс=' + Str(Record);
      locFlt[2] = 'ТестПлан=' + Str(локТестПланКласса);
      Filter = СложитьСтрокиФильтраПоИ(locFlt);
      IncludeDeleted = true;
      Select;
      while not Eof do
        if (not Current.Deleted):
          try Current.Delete;
          except end;
        fi;
        Next;
      od;
    end;
  end;

  proc ПрочитатьТестПримеры(локТестПланКласса: Т9_Тесты.ТестПланКласса);
    var locFlt: string[];
    var t: integer;
    Тест_ = nil;
    with Query.Create([Т9_Тесты.ТестОтчет]) do
      locFlt[1] = 'Сеанс=' + Str(Record);
      locFlt[2] = 'ТестПлан=' + Str(локТестПланКласса);
      Filter = СложитьСтрокиФильтраПоИ(locFlt);
      Order = 'НомерПП';
      Select;
      while not Eof do
        t = t + 1;
        Тест_[t] = Current;
        Next;
      od;
    end;
  end;

  proc ИнициализироватьНавигатор;
    var i, ii: integer;
    --{ очистка навигатора
    тблНавигатор.BeginModify;
    тблНавигатор.Root.Clear;
    ii = тблНавигатор.ColumnsCount;
    for i = ii .. 1 step -1 do
      тблНавигатор.DeleteColumn(i);
    od;
    тблНавигатор.EndModify;--}
    --{ создание столбцов навигатора
    with тблНавигатор.AddColumn do
      Caption      = '';
      Font.Name    = 'Arial';
      Font.Size    = 8;
      Width        = 0;
      Alignment    = Kernel.Template.LeftAlign;
      CanEdit      = false;
      CanSort      = false;
      ColumnFormat = Kernel.Cardfile.StringFormat;
    end;
    --}
    --{ заполнение навигатора строками в соотв. с подтаблицей СеансПП
    --}
    --{ оформление навигатора
    with тблНавигатор do
      ShowHeader = false;
      ShowIcons = true;
      ShowRoot = false;
      ShowGrid  = false;
      ShowZebra  = false;
    end;
    --}
  end;

  proc ЗаполнитьНавигатор;
    var locItem: GridItem;
    var локПозицииПрограммы: Subtable;
    var c, cc: integer;
    var локЭлемент: variant[];
    func ДобавитьГлавнуюВетвь: GridItem;--{
      локЭлемент = nil;
      локЭлемент[типОписание] = 'Классы';
      локЭлемент[типТипЭлемента] = типПрограммаСеанса;
      локЭлемент[типНомерПп] = 0;
      локЭлемент[типИдентификатор] = nil;
      локЭлемент[типКлючЭлемента] = Record.ExtId;
      тблНавигатор.Root.Add(локЭлемент);--тблНавигатор.Root.Add(['Классы', nil, типПрограммаСеанса]);
      Result = тблНавигатор.Root[1];
      Result.Image = ImageOfObject[iProject];
      Result.isGroup = true;
      Result.Opened = true;
    end;--}
    proc ДобавитьВетвиТестов(locRootItem: GridItem; locIndex: integer);--{
      var locFlt: string[];
      var локОписаниеТеста: string;
      var t: integer;
      with Query.Create([Т9_Тесты.ТестОтчет]) do
        locFlt[1] = 'Сеанс=' + Str(Record);
        locFlt[2] = 'ТестПлан=' + Str(ТестПланПП[locIndex].ТестПланКласса);
        Filter = СложитьСтрокиФильтраПоИ(locFlt);
        Order = 'НомерПП';
        Select;
        while not Eof do
          t = t + 1;
          локОписаниеТеста = Current.Пример.Наим;
          локЭлемент = nil;
          локЭлемент[типОписание] = локОписаниеТеста;
          локЭлемент[типТипЭлемента] = типТестПример;
          локЭлемент[типНомерПп] = t;
          локЭлемент[типИдентификатор] = Current;
          локЭлемент[типКлючЭлемента] = Current.ExtId;
          locRootItem.Add(локЭлемент);--locRootItem.Add([локОписаниеТеста, Current, типТестПример, t]);
          if (Current.Результат = 0):
            locRootItem[locRootItem.Count].Image = ImageOfObject[iUnCheck];
          elsif (Current.Результат = 1):
            locRootItem[locRootItem.Count].Image = ImageOfObject[iCheckGreen];
          elsif (Current.Результат = 2):
            locRootItem[locRootItem.Count].Image = ImageOfObject[iCheckRed];
          fi;
          Next;
        od;
        ИндикацияСтатусаТестПлана(locRootItem);
        ВычислитьСтатистику(locRootItem, false);
      end;
    end;--}
    func ДобавитьВетвьТестПлана(locRootItem: GridItem; locIndex: integer): GridItem;--{
      var локТестПланКласса: Т9_Тесты.ТестПланКласса;
      var локПолноеИмяКласса, локОписаниеКласса, локОписаниеТестПлана: string;
      var j, p, pp: integer;
      var vPosition: Subtable;
      if Позиция_ОписаниеГруппы(nil, locIndex):--{
        локПолноеИмяКласса = ТестПланПП[locIndex].ПолноеИмяКласса;
        локОписаниеКласса = Библио.ОписаниеКлассаПоИмени(локПолноеИмяКласса);
        локЭлемент = nil;
        локЭлемент[типОписание] = локОписаниеКласса;
        локЭлемент[типТипЭлемента] = типПрограммаКласса;
        локЭлемент[типНомерПп] = locIndex;
        локЭлемент[типИдентификатор] = локПолноеИмяКласса;
        локЭлемент[типКлючЭлемента] = PadL(Str(locIndex), 14, '0');
        locRootItem.Add(локЭлемент);--locRootItem.Add([локОписаниеКласса, locIndex, типПрограммаКласса, локПолноеИмяКласса]);
        j = locRootItem.Count;
        Result = locRootItem[j];
        Result.Image = ImageOfObject[iClassGray];
        Result.isGroup = true;
        Result.Opened = true;
        vPosition = ТестПланПП.CreateSubtableView('inGroup and ПолноеИмяКласса="' + локПолноеИмяКласса + '"','');
        pp = vPosition.Count;
        for p = 1 .. pp do
          ДобавитьВетвьТестПлана(Result, vPosition.IndexByNumber[p]+1);
        od;
        ИндикацияСтатусаТестПлана(Result);
        ВычислитьСтатистику(Result, false);--}
      else --{
        локПолноеИмяКласса = ТестПланПП[locIndex].ПолноеИмяКласса;
        локОписаниеКласса = Библио.ОписаниеКлассаПоИмени(локПолноеИмяКласса);
        локТестПланКласса = ТестПланПП[locIndex].ТестПланКласса;
        локОписаниеТестПлана = if((локТестПланКласса <> nil), локТестПланКласса.Наим, nil);
        if Позиция_ВходитВГруппу(nil, locIndex):
          локЭлемент = nil;
          локЭлемент[типОписание] = локОписаниеТестПлана;
          локЭлемент[типТипЭлемента] = типТестПлан;
          локЭлемент[типНомерПп] = locIndex;
          локЭлемент[типИдентификатор] = локТестПланКласса;
          локЭлемент[типКлючЭлемента] = PadL(Str(locIndex), 14, '0');
          locRootItem.Add(локЭлемент);--locRootItem.Add([локОписаниеТестПлана, locIndex, типТестПлан, локТестПланКласса]);
        elsif Позиция_ВнеГруппы(nil, locIndex):
          локЭлемент = nil;
          локЭлемент[типОписание] = локОписаниеКласса;
          локЭлемент[типТипЭлемента] = типТестПлан;
          локЭлемент[типНомерПп] = locIndex;
          локЭлемент[типИдентификатор] = локТестПланКласса;
          локЭлемент[типКлючЭлемента] = PadL(Str(locIndex), 14, '0');
          locRootItem.Add(локЭлемент);--locRootItem.Add([локОписаниеКласса, locIndex, типТестПлан, локТестПланКласса]);
        fi;
        j = locRootItem.Count;
        Result = locRootItem[j];
        Result.Image = ImageOfObject[iClassGray];
        Result.isGroup = true;
        Result.Opened = false;
        ДобавитьВетвиТестов(Result, locIndex);--}
      fi;
    end;--}
    ИнициализироватьНавигатор;
    locItem = ДобавитьГлавнуюВетвь;
    локПозицииПрограммы = ТестПланПП.CreateSubtableView('not inGroup','');
    cc = локПозицииПрограммы.Count;
    for c = 1 .. cc do
      ДобавитьВетвьТестПлана(locItem, локПозицииПрограммы.IndexByNumber[c]+1);
      --locItem.Opened = false;
    od;
  end;

  --@doc удаление лишних записей, случано сохранившихся в результате непредвиденных действий
  proc УдалениеСлучайныхЗаписейТестов(var локИмяТестируемогоКласса: string);
    with Query.Create([Т9_Тесты.ТестОтчет]) do
      Filter = 'Сеанс=' + Str(Record) + ' and Пример.ПолноеИмяКласса="' + локИмяТестируемогоКласса + '"';
      if RecordsExists:
        IncludeDeleted = true;
        Select;
        First;
        while not Eof do
          if (not Current.Deleted):
            try Current.Delete; except end;
          fi;
          Next;
        end;
      fi;
    end;
  end;

--  func ВычислитьКодВетви(ТекущаяВетвь: GridItem): string;
--
--    --Result = ;
--  end;

  proc ИндикацияСтатусаТестПлана(locBranch: GridItem);
    var локЭлемент: variant[];
    var t,tt: integer;
    var UnCount, GreenCount, RedCount, YellowCount: integer;
    локЭлемент = locBranch.Value as variant[];
    if (локЭлемент[типТипЭлемента] = типТестПлан): --{
      tt = locBranch.Count;
      for t = 1 .. tt do
        if (locBranch.Items[t].Image = ImageOfObject[iUnCheck]):
          UnCount = UnCount + 1;
        elsif (locBranch.Items[t].Image = ImageOfObject[iCheckGreen]):
          GreenCount = GreenCount + 1;
        elsif (locBranch.Items[t].Image = ImageOfObject[iCheckRed]):
          RedCount = RedCount + 1;
        fi;
      od;
      if (tt = UnCount):
        locBranch.Image = ImageOfObject[iClassGray];
      elsif  (tt = GreenCount):
        locBranch.Image = ImageOfObject[iClassGreen];
      else
        locBranch.Image = ImageOfObject[iClassYellow];
      fi;--}
      локЭлемент = locBranch.Parent.Value as variant[];
      if (локЭлемент[типТипЭлемента] = типПрограммаКласса):
        ИндикацияСтатусаТестПлана(locBranch.Parent);
      fi;
    elsif (локЭлемент[типТипЭлемента] = типПрограммаКласса):--{
      tt = locBranch.Count;
      for t = 1 .. tt do
        if (locBranch.Items[t].Image = ImageOfObject[iClassGray]):
          UnCount = UnCount + 1;
        elsif (locBranch.Items[t].Image = ImageOfObject[iClassGreen]):
          GreenCount = GreenCount + 1;
        elsif (locBranch.Items[t].Image = ImageOfObject[iClassYellow]):
          YellowCount = YellowCount + 1;
        fi;
      od;
      if (tt = UnCount):
        locBranch.Image = ImageOfObject[iClassGray];
      elsif  (tt = GreenCount):
        locBranch.Image = ImageOfObject[iClassGreen];
      else
        locBranch.Image = ImageOfObject[iClassYellow];
      fi;--}
    fi;
  end;

  proc ПонизитьЦветФрейма(locFrame: TemplateFrame; locDelta: integer = 40);
    var locColor, locR, locG, locB, newR, newG, newB: Integer;
      locColor = locFrame.Color;
      SplitColor(locColor, locR, locG, locB);
      newR = if(((locR - locDelta) > 0), Min([255, (locR - locDelta)]), 0);
      newG = if(((locG - locDelta) > 0), Min([255, (locG - locDelta)]), 0);
      newB = if(((locB - locDelta) > 0), Min([255, (locB - locDelta)]), 0);
      locColor = newR + (newG * 256) + (newB * 256 * 256);
      locFrame.Color = locColor;
  end;

  proc ВидФормы;
    var locStyle: TemplateStyle;
    var locSection: TemplateSection;
    if ТестовыеДанные.ВсоставеИБ:
      locStyle = СИС2.Функции.ПолучитьСтильПоИмени(Self.Template, 'Поле вывода');
    else
      locStyle = СИС2.Функции.ПолучитьСтильПоИмени(Self.Template, 'Поле ввода');
    fi;
    with Template.CellByField['ТестовыеДанные.ИмяИБ'] do
      Style = locStyle;
      Button = not ТестовыеДанные.ВсоставеИБ;
    end;
    with Template.CellByField['ТестовыеДанные.ИмяФБ'] do
      Style = locStyle;
      Button = not ТестовыеДанные.ВсоставеИБ;
    end;
    with Template.CellByField['ТестовыеДанные.ИмяСервера'] do
      Style = locStyle;
    end;
    if (Стадия = СтадияСозданиеПрограммы as integer):      кнНачатьСменаСтадииСеанса.Caption = 'Начать сеанс';
    elsif (Стадия = СтадияВыполнениеПрограммы as integer): кнНачатьСменаСтадииСеанса.Caption = 'Завершить сеанс';
    elsif (Стадия = СтадияСеансЗавершен as integer):       кнНачатьСменаСтадииСеанса.Caption = 'Возобновить сеанс';
    elsif (Стадия = СтадияСеансВозобновлен as integer):    кнНачатьСменаСтадииСеанса.Caption = 'Завершить сеанс';
    fi;
    кнТестоваяБаза.Enabled = ТестовыеДанные.ВсоставеИБ and (Стадия = СтадияСозданиеПрограммы as integer);
    with Template.FrameByName['фреймРабЭлемент11'] do--{
      locSection = Section[1];
      locSection.Cell[3,2].Enabled = (Стадия = СтадияСозданиеПрограммы as integer);
    end;--}
    with Template.FrameByName['фреймРабЭлемент21'] do--{
      locSection = CellByField['NN'].Owner;
      locSection.Cell[2,1].Enabled = (Стадия = СтадияСозданиеПрограммы as integer);
      locSection.Cell[5,1].Enabled = not (Стадия = СтадияСеансЗавершен as integer);
      locSection.Cell[6,1].Enabled = not (Стадия = СтадияСеансЗавершен as integer);
      locSection.Cell[7,1].Enabled = (Стадия = СтадияСозданиеПрограммы as integer);
    end;--}
    with Template.FrameByName['фреймРабЭлемент24'] do--{
      CellByField['ТестНеПройден'].Enabled = (Стадия in [СтадияВыполнениеПрограммы as integer,СтадияСеансВозобновлен as integer]);
      CellByField['ТестПройден'].Enabled = (Стадия in [СтадияВыполнениеПрограммы as integer,СтадияСеансВозобновлен as integer]);
      CellByField['Комментарий'].Enabled = not (Стадия = СтадияСозданиеПрограммы as integer);
      --CellByField['текстЗаключениеТестировщика'].Enabled = not (Стадия = СтадияСозданиеПрограммы as integer);
    end;--}
  end;

  proc ВычислитьСведенияОПроектах;
    var p, pp: integer;
    var locProjectName: string[];
    var locProjectInfo: ProjectInfo;
    Record.Проект.Clear;
    pp = ТестПланПП.Count;
    for p = 1 .. pp do
      if (ТестПланПП[p].ТестПланКласса <> nil):
        СИС2.Функции.AddInArray(locProjectName, ТестПланПП[p].ТестПланКласса.ИмяПроектаКласса, true);
      fi;
    od;
    for p = 1 .. LengthOfArray(locProjectName) do
      with Record.Проект.AddEx do
        Имя = locProjectName[p];
        locProjectInfo = BaseInfo.ProjectByName[Имя];
        if (locProjectInfo <> nil):
          Наим = locProjectInfo.Title;
          Версия = locProjectInfo.Version;
        fi;
      end;
    od;
    ИзменитьСостояниеЗаписи;
  end;

  proc ВычислитьСведенияОДанных;
    ТестовыеДанные.ИмяИБ = SessionInfo.Infobase.Name;
    ТестовыеДанные.ИмяФБ = Kernel.Settings.CommonFile.ClassInfo.DataBaseName;
    ТестовыеДанные.ИмяСервера = SessionInfo.ServerName;
    ТестовыеДанные.ИмяСервера = if((ТестовыеДанные.ИмяСервера = ''), 'localhost', ТестовыеДанные.ИмяСервера);
  end;

  var ТекущаяСтатистика: storage;

  --type типЭлементаНавигатора = (типПрограммаСеанса = 0, типПрограммаКласса, типТестПлан, типТестПример);
  --type типДанныхЭлементаНавигатора = (типОписание = 1, типТипЭлемента, типНомерПп, типИдентификатор, типКлючЭлемента);
  proc ВычислитьСтатистику(locBranch: GridItem; locRecurs: logical);
    var locGridItem: GridItem;
    var локЭлемент: variant[];
    var t,tt: integer;

    proc ВычислитьОбщуюСтатистику(locBranch_: GridItem; locRecurs_: logical);
      var b_, bb_: integer;
      var s_, ss_: integer;
      var локЭлемент_: variant[];
      if (locBranch_ = тблНавигатор.Root) and (not locRecurs_):
        ТекущаяСтатистика = nil;
        ТекущаяСтатистика = Storage.Create;
        ТекущаяСтатистика.AllCount_csn = 0;
        ТекущаяСтатистика.Plus_csn = 0;
        ТекущаяСтатистика.Minus_csn = 0;
        ТекущаяСтатистика.Nil_csn = 0;
        ТекущаяСтатистика.AllCount_psn = 100;
        ТекущаяСтатистика.Plus_psn = 0;
        ТекущаяСтатистика.Minus_psn = 0;
        ТекущаяСтатистика.Nil_psn = 0;
        bb_ = locBranch_.Count;
        for b_ = 1 .. bb_ do
          ВычислитьОбщуюСтатистику(locBranch_.Items[b_], true);
        od;
      else
        локЭлемент_ = locBranch_.Value as variant[];
        if (локЭлемент_[типТипЭлемента] = типТестПлан):
          bb_ = locBranch_.Count;
          for b_ = 1 .. bb_ do
            ТекущаяСтатистика.AllCount_csn = ТекущаяСтатистика.AllCount_csn + 1;
            locGridItem = locBranch_.Items[b_];
            if (locGridItem.Image = ImageOfObject[iCheckGreen]):
              ТекущаяСтатистика.Plus_csn = ТекущаяСтатистика.Plus_csn + 1;
            elsif (locGridItem.Image = ImageOfObject[iCheckRed]):
              ТекущаяСтатистика.Minus_csn = ТекущаяСтатистика.Minus_csn + 1;
            fi;
            ТекущаяСтатистика.Nil_csn = ТекущаяСтатистика.AllCount_csn - (ТекущаяСтатистика.Plus_csn + ТекущаяСтатистика.Minus_csn);
            ТекущаяСтатистика.Plus_psn = (ТекущаяСтатистика.Plus_csn / ТекущаяСтатистика.AllCount_csn) * 100;
            ТекущаяСтатистика.Minus_psn = (ТекущаяСтатистика.Minus_csn / ТекущаяСтатистика.AllCount_csn) * 100;
            ТекущаяСтатистика.Nil_psn = (ТекущаяСтатистика.Nil_csn / ТекущаяСтатистика.AllCount_csn) * 100;
          od;
        else
          bb_ = locBranch_.Count;
          for b_ = 1 .. bb_ do
            ВычислитьОбщуюСтатистику(locBranch_.Items[b_], true);
          od;
        fi;
      fi;
    end;

--    var AllCount, UnCount, GreenCount, RedCount, YellowCount: integer;
    if not locRecurs:
      ТекущаяСтатистика = nil;
      ВычислитьОбщуюСтатистику(тблНавигатор.Root,  false);

--      --#AllCount_csn = nil;
--      tt = тблНавигатор.Root.Count;
--      for t = 1 .. tt do
--        ВычислитьСтатистику(тблНавигатор.Root.Items[t], true);
--      od;
--    else
--      локЭлемент = locBranch.Value as variant[];
--      tt = locBranch.Count;
--
    fi;


--    локЭлемент = locBranch.Value as variant[];
--    if (локЭлемент[3] = типТестПлан): --{
--      tt = locBranch.Count;
--      for t = 1 .. tt do
--        if (locBranch.Items[t].Image = ImageOfObject[iUnCheck]):
--          UnCount = UnCount + 1;
--        elsif (locBranch.Items[t].Image = ImageOfObject[iCheckGreen]):
--          GreenCount = GreenCount + 1;
--        elsif (locBranch.Items[t].Image = ImageOfObject[iCheckRed]):
--          RedCount = RedCount + 1;
--        fi;
--        AllCount = AllCount + 1;
--      od;
--      if (tt = UnCount):
--        locBranch.Image = ImageOfObject[iClassGray];
--      elsif  (tt = GreenCount):
--        locBranch.Image = ImageOfObject[iClassGreen];
--      else
--        locBranch.Image = ImageOfObject[iClassYellow];
--      fi;--}
--      локЭлемент = locBranch.Parent.Value as variant[];
--      if (локЭлемент[3] = типПрограммаКласса):
--        ИндикацияСтатусаТестПлана(locBranch.Parent);
--      fi;
--    elsif (локЭлемент[3] = типПрограммаКласса):--{
--      tt = locBranch.Count;
--      for t = 1 .. tt do
--        if (locBranch.Items[t].Image = ImageOfObject[iClassGray]):
--          UnCount = UnCount + 1;
--        elsif (locBranch.Items[t].Image = ImageOfObject[iClassGreen]):
--          GreenCount = GreenCount + 1;
--        elsif (locBranch.Items[t].Image = ImageOfObject[iClassYellow]):
--          YellowCount = YellowCount + 1;
--        fi;
--      od;
--      if (tt = UnCount):
--        locBranch.Image = ImageOfObject[iClassGray];
--      elsif  (tt = GreenCount):
--        locBranch.Image = ImageOfObject[iClassGreen];
--      else
--        locBranch.Image = ImageOfObject[iClassYellow];
--      fi;--}
--    fi;

  end;
--}}

--{{ Обработчики событий шаблона

  proc шаблон_ПриСоздании(Context: Variant);
    inherited шаблон_ПриСоздании(Context);
    ИнициализироватьИконки;
  end;

  proc шаблон_ПриОткрытии(Create :Logical);
    inherited шаблон_ПриОткрытии(Create);
    тблНавигатор.Align = true;
    with фреймРабЭлемент1 do
      ShowTabs = false;
      AutoSize = true;
    end;
    with фреймРабЭлемент2 do
      ShowTabs = false;
      AutoSize = false;
    end;
    ПоказыватьЗебру = true;
    ПонизитьЦветФрейма(Template.FrameByName['фреймНавигатор1']);
    ПонизитьЦветФрейма(Template.FrameByName['фреймРабЭлемент11']);
    ПонизитьЦветФрейма(Template.FrameByName['фреймРабЭлемент12']);
    ПонизитьЦветФрейма(Template.FrameByName['фреймРабЭлемент13']);
    ПонизитьЦветФрейма(Template.FrameByName['фреймРабЭлемент14']);
    Template.FrameByName['фреймРеквизитыДоп'].Visible = not фреймРеквизитыДопСкрыт;
  end;

  proc шаблон_ПриСчитывании;
    inherited шаблон_ПриСчитывании;
    ЗаполнитьНавигатор;
    локТранзакция = Transaction.Create([Т9_Тесты.СеансТестирования,Т9_Тесты.ТестОтчет]);
    тблНавигатор.SetFocus;
    ВидФормы;
  end;

  func шаблон_ПриЗаписи :Logical;
    if СИС2.ФункцииДокумента.RecordEdited(Record):
      Record.Post;
      локТранзакция.Apply(true);
    fi;
  end;

  func шаблон_ПриОтмене :Logical;
    if СИС2.ФункцииДокумента.RecordEdited(Record):
      Record.Cancel;
      локТранзакция.Cancel;
      if (not БланкЗакрывается) and (not Window.Closing):
        Шаблон_ПриСчитывании;
      fi;
      --Result = inherited шаблон_ПриОтмене;
    fi;
  end;
--}}

--{{ Обработчики событий клеток шаблона

  func Поле_ПриНажатии (Cell: TemplateCell; Action: Template.ClickTypes): Logical;
    var локЗаписьТестПлана: Т9_Тесты.ТестПланКласса;
    var локЭлемент: variant[];
    var локНаимТестПлана: string;
    if (Cell.Contents = 'ТестовыеДанные.ВсоставеИБ'):
      ТестовыеДанные.ВсоставеИБ = not ТестовыеДанные.ВсоставеИБ;
      if ТестовыеДанные.ВсоставеИБ:
        ВычислитьСведенияОДанных;
      fi;
      ВидФормы;
    elsif (Cell.Contents = '+') and (Cell.Owner = секцСценарий1ЗаголовокТаблицы):--добавление тест-плана класса в тест-план из заголовка таблицы
      if CmOk = ДобавитьТестПлан(Cell, локЗаписьТестПлана, true):
        АктуализироватьТестПримеры(локЗаписьТестПлана);
        ЗаполнитьНавигатор;
      fi;
    elsif (Cell.Contents = '+') and (Cell.Owner = секцСценарий1): --добавление тест-плана класса в тест-план из строки таблицы
      if CmOk = ДобавитьТестПлан(Cell, локЗаписьТестПлана, false):
        АктуализироватьТестПримеры(локЗаписьТестПлана);
        ЗаполнитьНавигатор;
      fi;
    elsif (Cell.Contents = 'x') and (Cell.Owner = секцСценарий1): --удаление строки из тест-плана (без удаления тест-плана класса из справочника)
      УдалитьТестПримеры(ТестПланПП[Cell.Frame].ТестПланКласса);
      УдалитьТестПлан(Cell);
      ЗаполнитьНавигатор;
    elsif (Cell.Contents = '5') and (Cell.Owner in [секцСценарий1,секцСценарий2]):--перемещение строк вверх
      ПоднятьТестПлан(Cell);
      ЗаполнитьНавигатор;
    elsif (Cell.Contents = '6') and (Cell.Owner in [секцСценарий1,секцСценарий2]):--перемещение строк вниз
      ОпуститьТестПлан(Cell);
      ЗаполнитьНавигатор;
    elsif (Cell.Contents = '...') and (Cell.Owner in [секцСценарий1,секцСценарий2]): --карточка тест-плана класса
      ПоказатьТестПлан(Cell);
      ЗаполнитьНавигатор;
    elsif (Cell.Contents = 'Предыдущий тест'):
      тблНавигатор.SetFocus;
      Self.Template.BeginModify;
      тблНавигатор.Current = ТекущаяВетвь_;
      ExecuteCommand('Kernel.Move.Up', false);
      Sleep(0.5);
      Self.Template.EndModify;
    elsif (Cell.Contents = 'Следующий тест'):
      тблНавигатор.SetFocus;
      Self.Template.BeginModify;
      локЭлемент = ТекущаяВетвь_.Parent.Value as variant[];
      локНаимТестПлана = локЭлемент[типОписание] as string;
      тблНавигатор.Current = ТекущаяВетвь_;
      ExecuteCommand('Kernel.Move.Down', false);
      Sleep(0.5);
      локЭлемент = тблНавигатор.Current.Value as variant[];
      if (локЭлемент[типТипЭлемента] <> типТестПример):
        Message('В тест-плане <' + локНаимТестПлана + '> выполнены все тесты.');
      fi;
      Self.Template.EndModify;
    elsif (Cell.Contents = 'ТестПройден') and (ТекущийТест_ <> nil):
      if (ТекущийТест_.Результат  = 1):
        ТекущийТест_.Результат = 0;
        ТекущаяВетвь_.Image = ImageOfObject[iUnCheck];
      else
        ТекущийТест_.Результат = 1;
        ТекущаяВетвь_.Image = ImageOfObject[iCheckGreen];
      fi;
      ИндикацияСтатусаТестПлана(ТекущаяВетвь_.Parent);
      ВычислитьСтатистику(ТекущаяВетвь_.Parent, false);
      ИзменитьСостояниеЗаписи;
    elsif (Cell.Contents = 'ТестНеПройден') and (ТекущийТест_ <> nil):
      if (ТекущийТест_.Результат  = 2):
        ТекущийТест_.Результат = 0;
        ТекущаяВетвь_.Image = ImageOfObject[iUnCheck];
      else
        ТекущийТест_.Результат = 2;
        ТекущаяВетвь_.Image = ImageOfObject[iCheckRed];
      fi;
      ИндикацияСтатусаТестПлана(ТекущаяВетвь_.Parent);
      ВычислитьСтатистику(ТекущаяВетвь_.Parent, false);
      ИзменитьСостояниеЗаписи;
    fi;
  end;

  func Поле_ПриОбзоре(Cell: TemplateCell; Value: Variant; var NewValue: Variant): Logical;
    var locFilePath: string;
    var locExtensions: string;
    if (Cell.Contents = 'ТестовыеДанные.ИмяИБ'):
      locExtensions = 'Файлы инф.б.|*.idb|Все файлы|*.*';
      if cmOk = ChooseFile(locFilePath, '', locExtensions):
        ТестовыеДанные.ИмяИБ = locFilePath;
        Template.EndEdit;
      fi;
    elsif (Cell.Contents = 'ТестовыеДанные.ИмяФБ'):
      if cmOk = ChooseFolder(locFilePath, ''):
        ТестовыеДанные.ИмяФБ = locFilePath;
        Template.EndEdit;
      fi;
    fi;
  end;


  func Поле_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    var Index: Integer;
    var locIsGroup: logical;
    var locDiscription: string;
    var локПозицииПрограммы: Subtable;
    var локНаим: string;
    if (Cell.Contents = 'ТестПланКласса.Наим'):--{
      локПозицииПрограммы = ТестПланПП.CreateSubtableView(Cell.Owner.SubtableFilter, '');
      Index = локПозицииПрограммы.IndexByNumber[Cell.Frame] + 1;
      locIsGroup = (ТестПланПП[Index].ТестПланКласса = nil) and (ТестПланПП[Index].ПолноеИмяКласса <> nil);
      locDiscription = Библио.ОписаниеКлассаПоИмени(ТестПланПП[Index].ПолноеИмяКласса);
      locDiscription = if((locDiscription <> nil), locDiscription, 'НЕВЕРНОЕ ИМЯ КЛАССА');
      if (locIsGroup):
        Result = '<b+>' + locDiscription;
      else
        if (ТестПланПП[Index].inGroup) and (ТестПланПП[Index].ТестПланКласса <> nil):
          Result = RepStr(' ', 8) + ТестПланПП[Index].ТестПланКласса.Наим;
        elsif (not ТестПланПП[Index].inGroup):
          Result = locDiscription;
        fi;
      fi;--}
    elsif (Cell.Contents = 'Имя') and (Cell.Owner.Name = 'секцИнфОпроектах'):--{
      локНаим = Record.Проект[Cell.Frame].Наим;
      Result = if((локНаим = nil), Value, Value + ' <cf:GrayText>(' + локНаим + ')');--}
    elsif (Cell.Contents = 'NN') and (Cell.Owner = секцСценарий2):--{
      локПозицииПрограммы = ТестПланПП.CreateSubtableView(Cell.Owner.SubtableFilter, '');
      Result = (локПозицииПрограммы.IndexByNumber[Cell.Frame] + 1);--}
    elsif (Cell.Contents = 'Пример.Наим'):--{
      Index = Cell.Frame;
      Result = Тест_[Index].Пример.Наим;--}
    elsif (Cell.Contents = 'NN') and (Cell.Owner = секцСценарий3):--{
      Index = Cell.Frame;
      Result = Тест_[Index].НомерПП;--}
    elsif (Cell.Contents = 'Наим'):--{
      Result = if((ТекущийТест_ <> nil), ТекущийТест_.Пример.Наим, '');--}
    elsif (Cell.Contents = 'СценарийТеста'):--{
      Result = if((ТекущийТест_ <> nil), ТекущийТест_.Пример.СценарийТеста, '');--}
    elsif (Cell.Contents = 'ОжидаемыйРезультат'):--{
      Result = if((ТекущийТест_ <> nil), ТекущийТест_.Пример.ОжидаемыйРезультат, '');--}
    elsif (Cell.Contents = 'ТестПройден'):--{
      Result = if((ТекущийТест_ <> nil), (ТекущийТест_.Результат = 1), false);--}
    elsif (Cell.Contents = 'ТестНеПройден'):--{
      Result = if((ТекущийТест_ <> nil), (ТекущийТест_.Результат = 2), false);--}
    --Статистика
    elsif (Cell.Contents = 'AllCount_csn'): Result = ТекущаяСтатистика.GetField(Cell.Contents);
    elsif (Cell.Contents = 'Plus_csn'):     Result = ТекущаяСтатистика.GetField(Cell.Contents);
    elsif (Cell.Contents = 'Minus_csn'):    Result = ТекущаяСтатистика.GetField(Cell.Contents);
    elsif (Cell.Contents = 'Nil_csn'):      Result = ТекущаяСтатистика.GetField(Cell.Contents);
    elsif (Cell.Contents = 'AllCount_psn'): Result = ТекущаяСтатистика.GetField(Cell.Contents);
    elsif (Cell.Contents = 'Plus_psn'):     Result = ТекущаяСтатистика.GetField(Cell.Contents);
    elsif (Cell.Contents = 'Minus_psn'):    Result = ТекущаяСтатистика.GetField(Cell.Contents);
    elsif (Cell.Contents = 'Nil_psn'):      Result = ТекущаяСтатистика.GetField(Cell.Contents);

    fi;
  end;

  func ПолеЗаголовокОкнаФормы_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): String;
    Window.Caption = 'Сеанс тестирования';
    if (Стадия = Константы.СтадияСозданиеПрограммы): Result = 'Сеанс' + Chr(13) + '<s-><s-><cf:GrayText>(создание программы тестирования)';
    elsif (Стадия = Константы.СтадияВыполнениеПрограммы): Result = 'Сеанс' + Chr(13) + '<s-><s-><cf:GrayText>(выполнение программы тестирования)';
    elsif (Стадия = Константы.СтадияСеансВозобновлен): Result = 'Сеанс' + Chr(13) + '<s-><s-><cf:GrayText>(выполнение программы тестирования возобновлено)';
    elsif (Стадия = Константы.СтадияСеансЗавершен): Result = 'Сеанс' + Chr(13) + '<s-><s-><cf:GrayText>(выполнение программы тестирования завершено)';
    fi;
  end;

  proc Поле_ПриРисовании(Cell: TemplateCell; Selected: Logical; var Color: Integer; var FieldColor: Integer; Font: Font);
    if ПоказыватьЗебру and (Cell.Owner = секцСценарий1):
      Поле_ПриРисованииЭффектЗебры(Cell, Selected, Color, FieldColor, Font);
    elsif ПоказыватьЗебру and (Cell.Owner = секцСценарий2):
      Поле_ПриРисованииЭффектЗебры(Cell, Selected, Color, FieldColor, Font);
    elsif ПоказыватьЗебру and (Cell.Owner = секцСценарий3):
      Поле_ПриРисованииЭффектЗебры(Cell, Selected, Color, FieldColor, Font);
    fi;
  end;
--}}

--{{ Обработчики событий прочих объектов шаблона

  proc кнПриНажатии (Sender: Button);
    var locPrjCrd: Тесты.картПроектСеанса;
    var locSesCrd: Тесты.картСеанс;
    var локЗаписьПроектаСеанса: Т9_Тесты.ПроектСеанса;
    var локЗаписьСеанса: Т9_Тесты.СеансТестирования;
    var локПолноеИмяКласса: string;
    var локТестПланКласса: Т9_Тесты.ТестПланКласса;
    var locInGroup: logical;
    var локРешение: integer;
    var p, pp: integer;

    func ВсеРеквизитыЗаполнены: logical;--{
      var t, tt: integer;
      --{ проверка раздела <Сведения о проектах>
      tt = Record.Проект.Count;
      if (tt > 0):
        Result = true;
        for t = 1 .. tt do
          if (nil in [Record.Проект[t].Имя, Record.Проект[t].Версия, Record.Проект[t].Ревизия]):
            Result = false;
            Break;
          fi;
        od;
        if (not Result):
          Message('Пожалуйста, проверьте полноту данных раздела <Сведения о проектах>!');
        fi;
      else
        Message('Пожалуйста, проверьте полноту данных раздела <Сведения о проектах>!');
        ВычислитьСведенияОПроектах;
        Template.FrameByName['фреймРеквизитыДоп'].Visible = true;
      fi;--}
      --{ проверка раздела <Сведения о тестовых данных>
      if Result:
        Result = not(nil in [ТестовыеДанные.ИмяИБ,ТестовыеДанные.ИмяФБ,ТестовыеДанные.ИмяСервера]);
        if not Result:
          Message('Пожалуйста, проверьте полноту данных раздела <Сведения о тестовых данных>!');
          ВычислитьСведенияОДанных;
          Template.FrameByName['фреймРеквизитыДоп'].Visible = true;
        fi;
      fi;--}
    end;--}

    if (Sender.Name = 'кнСоздатьПрограмму'): --{
      if (ТестПланПП.Count = 0): -- загрузка проекта сеанса допускается только при пустой подтаблице тест-планов
        локРешение = Enquiry (,'Загрузка базовой программы тестирования:',['По шаблону','По образцу','Отмена'],);
        if (локРешение = 1): --{ По шаблону
          locPrjCrd = Тесты.картПроектСеанса.Create;
          if CmOk = locPrjCrd.ShowEx(локЗаписьПроектаСеанса, '', Window.ModalWindow):
            Наим = локЗаписьПроектаСеанса.Наим;
            pp = локЗаписьПроектаСеанса.ТестПланПП.Count;
            for p = 1 .. pp do
              локПолноеИмяКласса = локЗаписьПроектаСеанса.ТестПланПП[p].ПолноеИмяКласса;
              локТестПланКласса = локЗаписьПроектаСеанса.ТестПланПП[p].ТестПланКласса;
              locInGroup = локЗаписьПроектаСеанса.ТестПланПП[p].InGroup;
              with ТестПланПП.Insert(p) do
                if (локТестПланКласса = nil): -- это группа тест-планов
                  ПолноеИмяКласса = локПолноеИмяКласса;
                else -- это тест-план
                  ПолноеИмяКласса = локПолноеИмяКласса;
                  ТестПланКласса = локТестПланКласса;
                  inGroup = locInGroup;
                  АктуализироватьТестПримеры(локТестПланКласса);
--                  tt = локТестПланКласса.ТестПП.Count;
--                  for t = 1 .. tt do
--                    локТест = Т9_Тесты.Тест.Create;
--                    локТест.Сеанс = Record;
--                    локТест.ТестПлан = локТестПланКласса;
--                    локТест.Пример = локТестПланКласса.ТестПП[t].Пример;
--                    локТест.НомерПП = t;
--                    локТест.Post;
--                  od;
                fi;
              end;
            od;
            ЗаполнитьНавигатор;
            ИзменитьСостояниеЗаписи;
          fi;--}
        elsif (локРешение = 2): --{ По образцу
          locSesCrd = Тесты.картСеанс.Create;
          if CmOk = locSesCrd.ShowEx(локЗаписьСеанса, 'Стадия=' + Str(Константы.СтадияСеансЗавершен), Window.ModalWindow):
            Наим = локЗаписьСеанса.Наим;
            pp = локЗаписьСеанса.ТестПланПП.Count;
            for p = 1 .. pp do
              локПолноеИмяКласса = локЗаписьСеанса.ТестПланПП[p].ПолноеИмяКласса;
              локТестПланКласса = локЗаписьСеанса.ТестПланПП[p].ТестПланКласса;
              locInGroup = локЗаписьСеанса.ТестПланПП[p].InGroup;
              with ТестПланПП.Insert(p) do
                if (локТестПланКласса = nil): -- это группа тест-планов
                  ПолноеИмяКласса = локПолноеИмяКласса;
                else -- это тест-план
                  ПолноеИмяКласса = локПолноеИмяКласса;
                  ТестПланКласса = локТестПланКласса;
                  inGroup = locInGroup;
                  АктуализироватьТестПримеры(локТестПланКласса);
--                  tt = локТестПланКласса.ТестПП.Count;
--                  for t = 1 .. tt do
--                    локТест = Т9_Тесты.Тест.Create;
--                    локТест.Сеанс = Record;
--                    локТест.ТестПлан = локТестПланКласса;
--                    локТест.Пример = локТестПланКласса.ТестПП[t].Пример;
--                    локТест.НомерПП = t;
--                    локТест.Post;
--                  od;
                fi;
              end;
            od;
            ЗаполнитьНавигатор;
            ИзменитьСостояниеЗаписи;
          fi;--}
        fi;
      fi;
    --}
    elsif (Sender.Name = 'кнСоставПроектов'): --{
      ВычислитьСведенияОПроектах;--}
    elsif (Sender.Name = 'кнТестоваяБаза'): --{
      ВычислитьСведенияОДанных;--}
    elsif (Sender.Name = 'кнНачатьСменаСтадииСеанса'): --{
      if (Стадия = СтадияСозданиеПрограммы as integer): -- переход в стадию выполнения программы тестирования
        if ВсеРеквизитыЗаполнены:
          if CmOk = EnqOkCancel('После начала выполнения программы тестирования добавление/удаление тест-планов и тестовых примеров будет невозможно. Продолжить?'):
            Стадия = СтадияВыполнениеПрограммы as integer;
            ДатаНачала = Now;
          fi;
        fi;
      elsif (Стадия = СтадияВыполнениеПрограммы as integer): -- переход в стадию "завершено" из стадии "выполняется"
        Стадия = СтадияСеансЗавершен as integer;
        ДатаОкончания = Now;
      elsif (Стадия = СтадияСеансЗавершен as integer):  -- переход в стадию "возобновлено"
        Стадия = СтадияСеансВозобновлен as integer;
        ДатаОкончания = nil as date;
      elsif (Стадия = СтадияСеансВозобновлен as integer): -- переход в стадию "завершено" из стадии "возобновлено"
        Стадия = СтадияСеансЗавершен as integer;
        ДатаОкончания = Now;
      fi;
      ИзменитьСостояниеЗаписи;
      ВидФормы;
      --}
    fi;
  end;

  proc тблНавигатор_ПриПеремещении(Sender: Grid);
    var локЭлемент: variant[];
    ТекущаяВетвь_ = Sender.Current;
    локЭлемент = Sender.Current.Value as variant[];
    if (локЭлемент[типТипЭлемента] = типПрограммаСеанса):
      ТекущийТест_ = nil;
      фреймРабЭлемент1.CurrentFrame = фреймРабЭлемент1.Frame[1];
      фреймРабЭлемент1.CurrentFrame.Visible = true;
      фреймРабЭлемент2.CurrentFrame = фреймРабЭлемент2.Frame[1];
      фреймРабЭлемент2.CurrentFrame.Visible = true;
    elsif (локЭлемент[типТипЭлемента] = типПрограммаКласса):
      ТекущийТест_ = nil;
      секцСценарий2.SubtableFilter = 'ПолноеИмяКласса="' + (локЭлемент[типИдентификатор] as string) + '"';
      фреймРабЭлемент1.CurrentFrame = фреймРабЭлемент1.Frame[2];
      фреймРабЭлемент1.CurrentFrame.Visible = true;
      фреймРабЭлемент2.CurrentFrame = фреймРабЭлемент2.Frame[2];
      фреймРабЭлемент2.CurrentFrame.Visible = true;
    elsif (локЭлемент[типТипЭлемента] = типТестПлан):
      ТекущийТест_ = nil;
      ПрочитатьТестПримеры(локЭлемент[типИдентификатор] as Т9_Тесты.ТестПланКласса);
      секцСценарий3.Count = LengthOfArray(Тест_);
      фреймРабЭлемент1.CurrentFrame = фреймРабЭлемент1.Frame[3];
      фреймРабЭлемент1.CurrentFrame.Visible = true;
      фреймРабЭлемент2.CurrentFrame = фреймРабЭлемент2.Frame[3];
      фреймРабЭлемент2.CurrentFrame.Visible = true;
    elsif (локЭлемент[типТипЭлемента] = типТестПример):
      ТекущийТест_ = локЭлемент[типИдентификатор] as Т9_Тесты.ТестОтчет;
      фреймРабЭлемент1.CurrentFrame = фреймРабЭлемент1.Frame[4];
      фреймРабЭлемент1.CurrentFrame.Visible = true;
      фреймРабЭлемент2.CurrentFrame = фреймРабЭлемент2.Frame[4];
      фреймРабЭлемент2.CurrentFrame.Visible = true;
    --фреймРабЭлемент1.CurrentFrame = фреймРабЭлемент1.Frame[4]; фреймРабЭлемент2.CurrentFrame = фреймРабЭлемент2.Frame[4];
    fi;
      
  end;

  func фреймПриСкрытии(locFrame: TemplateFrame): Logical;
    if (locFrame.Name = 'фреймРеквизитыДоп'):
      фреймРеквизитыДопСкрыт = locFrame.Visible;
      Result = true;
    fi;
  end;

--}}

end