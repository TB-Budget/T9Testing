--{{ Т9_Тесты - проект для тестирования проектов, созданных на платформе Т9 (c) ТБ.Бюджет, 2015
--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
--}

class inherited СИС2.БазовыйБланкРедактор "Сеанс тестирования", editor СеансТестирования;

import СИС2 classes Функции;

  inobject private

  var фреймДопСервис: TemplateFrame;
  var тблНавигатор: Grid;

  var секцСценарийЗаголовокТаблицы1: TemplateSection;
  var секцСценарийЗаголовокТаблицы2: TemplateSection;
  var секцСценарий: TemplateSection;

  var NN: integer[] = $;

  var локТранзакция: Transaction;

--{{ Вспомогательные методы
  proc ИнициализироватьЭлементыЦветаКоторыхМожноМенять;
    ЭлементыЦветаКоторыхМожноМенять = [[Self.Template,фреймДопСервис],[ОсновнойФрейм]];
  end;

  proc ИзменитьСостояниеЗаписи;
    СИС2.ФункцииДокумента.RecordEdit(Record);
    if not Record.Modified then
      Record.Modified = true;
    end;
  end;

  proc СоздатьНавигатор;
    var i, ii: integer;
    --{ очистка навигатора
    тблНавигатор.BeginModify;
    тблНавигатор.Root.Clear;
    ii = тблНавигатор.ColumnsCount;
    for i = ii .. 1 step -1 do
      тблНавигатор.DeleteColumn(i);
    od;
    тблНавигатор.EndModify;--}
    --{ создание столбцов навигатора
    with тблНавигатор.AddColumn do
      Caption      = '';
      Font.Name    = 'Arial';
      Font.Size    = 8;
      Width        = 0;
      Alignment    = Kernel.Template.LeftAlign;
      CanEdit      = false;
      CanSort      = false;
      ColumnFormat = Kernel.Cardfile.StringFormat;
    end;
    --}
    --{ заполнение навигатора строками в соотв. с подтаблицей СеансПП
    --}
    --{ оформление навигатора
    with тблНавигатор do
      ShowHeader = false;
      ShowIcons = true;
      ShowRoot = false;
      ShowGrid  = false;
      ShowZebra  = false;
    end;
    --}

--    --собственно заполнение
--    Q                   = Query.Create([Справочники.КодВФО]);
--    if    КазенноеУчреждение then
--      Q.Filter          = ФильтрСпрВФО1('КУ');
--    elsif БюджетноеУчреждение then
--      Q.Filter          = ФильтрСпрВФО1('БУ');
--    elsif АвтономноеУчреждение then
--      Q.Filter          = ФильтрСпрВФО1('АУ');
--    end;
--    --Q.LoadingFields     = '';
--    Q.Order             = 'Код';
--    Q.Select;
--    ЭлементНавигатора[1]= тблВФО.Root;
--    for k = 1..Q.Count do
--      if Q.Current.Код in аВидыФО then
--        ЭлементНавигатора[1].Add([true, Q.Current.Код,Q.Current.Наим,'...',Q.Current]);
--      else
--        ЭлементНавигатора[1].Add([false,Q.Current.Код,Q.Current.Наим,'...',Q.Current]);
--      end;
--      j                 = ЭлементНавигатора[1].Count;
--      ЭлементНавигатора[1].Items[j].isGroup=false;
--      Q.Next;
--    end;
  end;

  proc ЗаполнитьНавигатор;
    var ImageProject: Image;
    var ImageClassGray: Image;
    var ImageCheckBoxes: Image;
    var ImageUnCheck: Image;
    var локПозицииКлассов: Subtable;
    var локПозицииТестПланов: Subtable;
    --var локПозиции2: Subtable;
    var locRoot: GridItem;
    var ЭлементНавигатора: GridItem[];
    var локЭлементНавигатора: GridItem;
    var ItemsCount, c, cc, p, pp, n, t, tt: integer;
    var vClass: Class;
    var локНаимЭлемента: string;
    var локЗаписьТеста: Т9_Тесты.Тест;
    var locFlt: string[];
    var локПолноеИмяКласса: string;
    var локОписаниеКласса: string;
    var локТестПланКласса: Т9_Тесты.ТестПланКласса;
    var локОписаниеТестПлана: string;
    var локТест: Т9_Тесты.Тест;

    func Позиция_ОписаниеГруппы(locIndex: integer): logical;--{
      if (локПозицииКлассов <> nil):
        Return (локПозицииКлассов.ItemsByNumber[locIndex].ТестПланКласса = nil);
      fi;
    end;--}
    func Позиция_ВходитВГруппу(locIndex: integer): logical;--{
      if (локПозицииКлассов <> nil):
        Return (локПозицииКлассов.ItemsByNumber[locIndex].ТестПланКласса <> nil) and (локПозицииКлассов.ItemsByNumber[locIndex].inGroup);
      fi;
    end;--}
    func Позиция_ВнеГруппы(locIndex: integer): logical;--{
      if (локПозицииКлассов <> nil):
        Return (локПозицииКлассов.ItemsByNumber[locIndex].ТестПланКласса <> nil) and (not локПозицииКлассов.ItemsByNumber[locIndex].inGroup);
      fi;
    end;--}


    --{
    ImageProject = Image.Create;
    ImageProject.LoadFromFile("%Projects%\Т9_Тесты\Приложения\Иконки\Project.ico");
    ImageClassGray = Image.Create;
    ImageClassGray.LoadFromFile("%Projects%\Т9_Тесты\Приложения\Иконки\Plugin\Gray.ico");
    ImageUnCheck = Image.Create;
    ImageUnCheck.LoadFromFile("%Projects%\Т9_Тесты\Приложения\Иконки\check_box_uncheck.ico");
    --}
    СоздатьНавигатор;
    локПозицииКлассов = ТестПланПП.CreateSubtableView('not inGroup','');
    cc = локПозицииКлассов.Count;
    тблНавигатор.Root.Add(['Классы']);
    тблНавигатор.Root[1].Image = ImageProject;
    тблНавигатор.Root[1].isGroup = true;
    тблНавигатор.Root[1].Opened = true;
    locRoot = тблНавигатор.Root[1];
    for c = 1 .. cc do
      --vClass = FindClass(локПозиции.ItemsByNumber[p].ПолноеИмяКласса);
      --локНаимЭлемента = if((vClass <> nil), vClass.ClassInfo.Description, локПозиции.ItemsByNumber[p].НаимКласса);
      локПолноеИмяКласса = локПозицииКлассов.ItemsByNumber[c].ПолноеИмяКласса;
      локОписаниеКласса = Библио.ОписаниеКлассаПоИмени(локПолноеИмяКласса);
      локТестПланКласса = локПозицииКлассов.ItemsByNumber[c].ТестПланКласса;
      локОписаниеТестПлана = if((локТестПланКласса <> nil), локТестПланКласса.Наим, nil);
      if Позиция_ОписаниеГруппы(c):
        locRoot.Add([локОписаниеКласса, локПозицииКлассов.IndexByNumber[c]]);
        n = locRoot.Count;
        locRoot[n].Image = ImageClassGray;
        locRoot[n].isGroup = true;
        locRoot[n].Opened = true;
        локЭлементНавигатора = locRoot[n];
        локПозицииТестПланов = ТестПланПП.CreateSubtableView('inGroup and ПолноеИмяКласса="' + локПолноеИмяКласса + '"','');
        pp = локПозицииТестПланов.Count;
        for p = 1 .. pp do
          локТестПланКласса = локПозицииТестПланов.ItemsByNumber[p].ТестПланКласса;
          локОписаниеТестПлана = if((локТестПланКласса <> nil), локТестПланКласса.Наим, nil);
          локЭлементНавигатора.Add([локОписаниеТестПлана, локПозицииТестПланов.IndexByNumber[p]]);
          локЭлементНавигатора[p].Image = ImageClassGray;
          локЭлементНавигатора[p].isGroup = false;
          локЭлементНавигатора[p].Opened = false;
          tt = локПозицииТестПланов.ItemsByNumber[p].ТестПланКласса.ТестПП.Count;

        od;

--        tt = локПозиции.ItemsByNumber[p].ТестПланКласса.ТестПП.Count;
--        for t = 1 .. tt do
----          локТест = локПозиции.ItemsByNumber[p].ТестПланКласса.ТестПП.ItemsByNumber[t];
----          локНаимЭлемента = if((локТест <> nil), локТест.Пример.Наим, nil);
----          --локЗаписьТеста = локПозиции.ItemsByNumber[p].ТестПланКласса.ТестПП[t].Наим;
------          with Query.Create[Т9_Тесты.Тест] do
------            locFlt[1] = 'Сеанс =' + Str(Record);
------            locFlt[1] = 'Пример =' + Str(Record);
------          end;
----          локЭлементНавигатора.Add([локНаимЭлемента]);
----          локЭлементНавигатора.Items[t].Image = ImageUnCheck;
--        od;
      elsif Позиция_ВнеГруппы(c):
        locRoot.Add([локОписаниеТестПлана, локПозицииКлассов.IndexByNumber[c]]);
        n = locRoot.Count;
        locRoot[n].Image = ImageClassGray;
        locRoot[n].isGroup = false;
        locRoot[n].Opened = false;
      fi;


--      if (локПозиции.ItemsByNumber[p].ТестПланКласса = nil): -- это заголовок группы тест-планов (тест-планы класса)
--        locRoot.Add([локНаимЭлемента,локПозиции.IndexByNumber[p]]);
--        n = locRoot.Count;
--        locRoot[n].isGroup = true;
--        locRoot[n].Opened = false;
--        locRoot[n].Image = ImageClassGray;
--        локЭлементНавигатора = locRoot[n];
--      else -- это заголовок тест-плана (тест-план единственный для класса)
--        locRoot.Add([локНаимЭлемента,локПозиции.IndexByNumber[p]]);
--        n = locRoot.Count;
--        locRoot[n].isGroup = true;
--        locRoot[n].Opened = false;
--        locRoot[n].Image = ImageClassGray;
--        локЭлементНавигатора = locRoot[n];
--        tt = локПозиции.ItemsByNumber[p].ТестПланКласса.ТестПП.Count;
--        for t = 1 .. tt do
--          локНаимЭлемента = локПозиции.ItemsByNumber[p].ТестПланКласса.ТестПП.ItemsByNumber[t].Пример.Наим;
--          --локЗаписьТеста = локПозиции.ItemsByNumber[p].ТестПланКласса.ТестПП[t].Наим;
----          with Query.Create[Т9_Тесты.Тест] do
----            locFlt[1] = 'Сеанс =' + Str(Record);
----            locFlt[1] = 'Пример =' + Str(Record);
----          end;
--          локЭлементНавигатора.Add([локНаимЭлемента]);
--          локЭлементНавигатора.Items[t].Image = ImageUnCheck;
--
--        od;
----        with Query.Create[Т9_Тесты.Тест] do
----          locFlt[1] = 'Сеанс =' + Str(Record);
----          locFlt[1] = 'ПримерСеанс =' + Str(Record);
------          Filter = 'Сеан =' + Str(Record);
------
------
------
----        end;
--
--
--
--      fi;
--      --локЭлементНавигатора[1].Add([true, Q.Current.Код,Q.Current.Наим,'...',Q.Current]);
--
    od;
  end;

  --@doc удаление лишних записей, случано сохранившихся в результате непредвиденных действий
  proc УдалениеСлучайныхЗаписейТестов(var локИмяТестируемогоКласса: string);
    with Query.Create([Т9_Тесты.Тест]) do
      Filter = 'Сеанс=' + Str(Record) + ' and Пример.ПолноеИмяКласса="' + локИмяТестируемогоКласса + '"';
      if RecordsExists:
        IncludeDeleted = true;
        Select;
        First;
        while not Eof do
          if (not Current.Deleted):
            try Current.Delete; except end;
          fi;
          Next;
        end;
      fi;
    end;
  end;


--}}

--{{ Обработчики событий шаблона

  proc шаблон_ПриСоздании(Context: Variant);
    inherited шаблон_ПриСоздании(Context);
    СоздатьНавигатор;
  end;

  proc шаблон_ПриОткрытии(Create :Logical);
    inherited шаблон_ПриОткрытии(Create);
    тблНавигатор.Align = true;
  end;

  proc шаблон_ПриСчитывании;
    inherited шаблон_ПриСчитывании;
    ЗаполнитьНавигатор;
    локТранзакция = Transaction.Create([Т9_Тесты.СеансТестирования,Т9_Тесты.Тест]);
  end;

  func шаблон_ПриЗаписи :Logical;
    if СИС2.ФункцииДокумента.RecordEdited(Record):
      Record.Post;
      локТранзакция.Apply(true);
    fi;
  end;

  func шаблон_ПриОтмене :Logical;
    if СИС2.ФункцииДокумента.RecordEdited(Record):
      Record.Cancel;
      локТранзакция.Cancel;
      if (not БланкЗакрывается) and (not Window.Closing):
        Шаблон_ПриСчитывании;
      fi;
      --Result = inherited шаблон_ПриОтмене;
    fi;
  end;
--}}

--{{ Обработчики событий клеток шаблона

  func Поле_ПриНажатии (Cell: TemplateCell; Action: Template.ClickTypes): Logical;
  end;

  func ПолеЗаголовокОкнаФормы_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): String;
    Window.Caption = 'Сеанс тестирования';
-- type типСтадияТестрования = (СтадияСозданиеПрограммы = 0, СтадияВыполнениеПрограммы, СтадияСеансЗавершен, СтадияСеансВозобновлен);
    if (Стадия = Константы.СтадияСозданиеПрограммы): Result = 'Сеанс' + Chr(13) + '<s-><s-><cf:GrayText>(создание программы тестирования)';
    elsif (Стадия = Константы.СтадияВыполнениеПрограммы): Result = 'Сеанс' + Chr(13) + '<s-><s->(выполнение программы тестирования)';
    elsif (Стадия = Константы.СтадияСеансВозобновлен): Result = 'Сеанс' + Chr(13) + '<s-><s->(выполнение программы тестирования возобновлено)';
    elsif (Стадия = Константы.СтадияСеансЗавершен): Result = 'Сеанс' + Chr(13) + '<s-><s->(выполнение программы тестирования завершено)';
    fi;
  end;
--}}

--{{ Обработчики событий прочих объектов шаблона

  proc кнПриНажатии (Sender: Button);
    var locCrd: Тесты.картПроектСеанса;
    var локЗаписьПроектаСеанса: Т9_Тесты.ПроектСеанса;
    var локПолноеИмяКласса: string;
    var локТестПланКласса: Т9_Тесты.ТестПланКласса;
    var локЗаписьТестПлана: Т9_Тесты.ТестПланКласса;
    var locInGroup: logical;
    var локРешение: integer;
    var p, pp: integer;
    var t, tt: integer;
    var vClass: Class;
    var локИмяТестируемогоКласса: string;
    var локНаимТестируемогоКласса: string;
    var локТест: Т9_Тесты.Тест;
    if Sender.Name = 'кнСоздатьПрограмму':
      if (ТестПланПП.Count = 0): -- загрузка проекта сеанса допускается только при пустой подтаблице тест-планов
        локРешение = Enquiry (,'Загрузка базовой программы тестирования:',['По шаблону','По образцу','Отмена'],);
        if (локРешение = 1): -- По шаблону
          locCrd = Тесты.картПроектСеанса.Create;
          if CmOk = locCrd.ShowEx(локЗаписьПроектаСеанса, '', Window.ModalWindow):
            Наим = локЗаписьПроектаСеанса.Наим;
            pp = локЗаписьПроектаСеанса.ТестПланПП.Count;
            for p = 1 .. pp do
              локПолноеИмяКласса = локЗаписьПроектаСеанса.ТестПланПП[p].ПолноеИмяКласса;
              локТестПланКласса = локЗаписьПроектаСеанса.ТестПланПП[p].ТестПланКласса;
              locInGroup = локЗаписьПроектаСеанса.ТестПланПП[p].InGroup;
              with ТестПланПП.Insert(p) do
                if (локТестПланКласса = nil): -- это группа тест-планов
                  ПолноеИмяКласса = локПолноеИмяКласса;
                else -- это тест-план
                  ПолноеИмяКласса = локПолноеИмяКласса;
                  ТестПланКласса = локТестПланКласса;
                  inGroup = locInGroup;
                  tt = локТестПланКласса.ТестПП.Count;
                  for t = 1 .. tt do
                    локТест = Т9_Тесты.Тест.Create;
                    локТест.Пример = локТестПланКласса.ТестПП[t].Пример;
                    локТест.Сеанс = Record;
                    локТест.Post;
                  od;
                fi;

--                ТестПланКласса = локЗаписьТестПлана; -- stb
--                локИмяТестируемогоКласса = if(локЗаписьТестПлана <> nil, локЗаписьТестПлана.ПолноеИмяКласса, локЗаписьПроектаСеанса.ТестПланПП[p].ПолноеИмяКласса);  --{ служебные действия
--                УдалениеСлучайныхЗаписейТестов(локИмяТестируемогоКласса);
--                vClass = FindClass(локИмяТестируемогоКласса);
--                if (vClass <> nil):
--                  локНаимТестируемогоКласса = vClass.ClassInfo.Description;
--                else
--                  if (локЗаписьТестПлана <> nil):
--                    --локНаимТестируемогоКласса = локЗаписьТестПлана.НаимКласса;
--                    локНаимТестируемогоКласса = Библио.ОписаниеКлассаПоИмени(локЗаписьТестПлана.ИмяКласса);
--                  else
--                    --локНаимТестируемогоКласса = локЗаписьПроектаСеанса.ТестПланПП[p].НаимКласса;
--                  fi;
--                fi;
--                --}
--                ПолноеИмяКласса = локИмяТестируемогоКласса; -- stb
--                --НаимКласса = локНаимТестируемогоКласса; -- stb
--                --inGroup = локЗаписьПроектаСеанса.ТестПланПП[p].inGroup; -- stb
--                if (локЗаписьТестПлана <> nil):
--                  tt = локЗаписьТестПлана.ТестПП.Count;
--                  for t = 1 .. tt do
--                    локТест = Т9_Тесты.Тест.Create;
--                    локТест.Пример = локЗаписьТестПлана.ТестПП[t].Пример;
--                    локТест.Сеанс = Record;
--                    локТест.Post;
--                  od;
--                fi;
              end;
            od;
            ЗаполнитьНавигатор;
          fi;
        elsif (локРешение = 2): -- По образцу
          locCrd = Тесты.картПроектСеанса.Create;
          if CmOk = locCrd.ShowEx(локЗаписьПроектаСеанса, 'DocId<>' + Str(DocId), Window.ModalWindow):
            Наим = локЗаписьПроектаСеанса.Наим;
            pp = локЗаписьПроектаСеанса.ТестПланПП.Count;
            for p = 1 .. pp do
              with ТестПланПП.Insert(p) do
                ТестПланКласса = локЗаписьПроектаСеанса.ТестПланПП[p].ТестПланКласса; -- stb
                локИмяТестируемогоКласса = ТестПланКласса.ПолноеИмяКласса;  --{ служебные действия
                локИмяТестируемогоКласса = ТестПланКласса.ПолноеИмяКласса;  --{ служебные действия
                УдалениеСлучайныхЗаписейТестов(локИмяТестируемогоКласса);
                vClass = FindClass(локИмяТестируемогоКласса);
                локНаимТестируемогоКласса = if((vClass <> nil), vClass.ClassInfo.Description, локЗаписьПроектаСеанса.ТестПланПП[p].ТестПланКласса.Наим);
                --}
                ПолноеИмяКласса = локИмяТестируемогоКласса; -- stb
                --НаимКласса = локНаимТестируемогоКласса; -- stb
                --inGroup = локЗаписьПроектаСеанса.ТестПланПП[p].inGroup; -- stb
                tt = ТестПланКласса.ТестПП.Count;
                for t = 1 .. tt do
                  локТест = Т9_Тесты.Тест.Create;
                  локТест.Пример = ТестПланКласса.ТестПП[t].Пример;
                  локТест.Сеанс = Record;
                  локТест.Post;
                od;
              end;
            od;
            ЗаполнитьНавигатор;
          fi;
        fi;
      fi;
    fi;

--    if Sender.Name = 'кнЗагрузитьПроектСеанса':
--      if not (Record.State = Record.Normal):--{ сохранение записи до модификации
--        EditorPost;
--      fi;--}
--      if (ТестПланПП.Count = 0): -- загрузка проекта сеанса допускается только при пустой подтаблице тест-планов
--        locCrd = Тесты.картПроектСеанса.Create;
--        if CmOk = locCrd.ShowEx(локЗаписьПроектаСеанса, '', Window.ModalWindow):
--          Наим = локЗаписьПроектаСеанса.Наим;
--          pp = локЗаписьПроектаСеанса.ТестПланПП.Count;
--          for p = 1 .. pp do
--            with ТестПланПП.Insert(p) do
--              ТестПланКласса = локЗаписьПроектаСеанса.ТестПланПП[p].ТестПланКласса;
--              локИмяТестируемогоКласса = ТестПланКласса.ПолноеИмяКласса;
--              УдалениеСлучайныхЗаписейТестов(локИмяТестируемогоКласса);
--              tt = ТестПланКласса.ТестПП.Count;
--              for t = 1 .. tt do
--                локТест = Т9_Тесты.Тест.Create;
--                локТест.Пример = ТестПланКласса.ТестПП[t].Пример;
--                локТест.Сеанс = Record;
--                локТест.Post;
--              od;
--            end;
--          od;
--        fi;
--      fi;
--      if not (Record.State = Record.Normal):--{ сохранение записи после модификации
--        EditorPost;
--      fi;--}
--    ---
--    fi;
  end;
--}}

end