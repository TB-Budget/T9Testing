--{{ Т9_Тесты - проект для тестирования проектов, созданных на платформе Т9 (c) ТБ.Бюджет, 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
--}

class inherited СИС2.БазовыйБланкРедактор "Функциональная спецификация класса Т9", editor СпецификацияКласса;

import СИС2 classes Функции;

  inobject private

  var фреймДопСервис: TemplateFrame;
  var секцРеквизиты: TemplateSection;
  var секцРевизияЗаголовокТаблицы: TemplateSection;
  var секцРевизия: TemplateSection;

--{{ Вспомогательные методы

  proc ИнициализироватьЭлементыЦветаКоторыхМожноМенять;
    ЭлементыЦветаКоторыхМожноМенять = [[Self.Template,фреймДопСервис],[ОсновнойФрейм]];
  end;

  proc УстановитьФокусНаПервоеПолеВвода;
    Self.Template.CellByField['Наим'].SetFocus;
  end;

  proc ВидФормы;
    var ЗапретитьВыборКласса: logical;
    var locCell: TemplateCell;
    ЗапретитьВыборКласса = (Ревизия.Count > 0);
    locCell = Self.Template.CellByField['ПолноеИмяКласса'];
    locCell.Style = if(ЗапретитьВыборКласса, StyleByName('Поле вывода'), StyleByName('Поле выбора'));
    locCell.Enabled = not ЗапретитьВыборКласса;
    --locCell.Button = not ЗапретитьВыборКласса;
    locCell = Self.Template.CellByField['ТипБазовогоКласса'];
    locCell.Style = if(ЗапретитьВыборКласса, StyleByName('Поле вывода'), StyleByName('Поле выбора'));
    locCell.Enabled = not ЗапретитьВыборКласса;
    locCell.Button = not ЗапретитьВыборКласса;
    секцРеквизиты.Visible = not isGroup;
    секцРевизияЗаголовокТаблицы.Visible = not isGroup;
    секцРевизия.Visible = not isGroup;
  end;


--}}

--{{ Обработчики событий шаблона

  proc шаблон_ПриСоздании(Context :Variant);
    var locCell: TemplateCell;
    inherited шаблон_ПриСоздании(Context);
    locCell = Self.Template.CellByField['ТипБазовогоКласса'];
    Библио.ОбновитьСписокПоля(locCell, Константы.ТипыБазовыйхКлассов);
    locCell.List.Add('Не определено|0');
  end;

  proc шаблон_ПриСчитывании;
    inherited шаблон_ПриСчитывании;
    ВидФормы;
  end;
--}}


--{{ Обработчики событий клеток шаблона
  func Поле_ПриНажатии (Cell: TemplateCell; Action: Template.ClickTypes): Logical;
    var Index: integer;
    func МожноДобавлятьПозиции: logical;--{
      Result = (ТипБазовогоКласса <> nil) and (ПолноеИмяКласса <> nil) and (ИмяПроектаКласса <> nil);
      if (not Result):
        Message('Пожалуйста, завершите заполнение реквизитов спецификации!');
      fi;
    end;--}
    if (Cell.Contents = '+') and (Cell.Owner = секцРевизияЗаголовокТаблицы) and МожноДобавлятьПозиции:--{ добавление позиции из заголовка таблицы
      секцРевизия.InsertFrame(1);
      ВидФормы;--}
    elsif (Cell.Contents = '+') and (Cell.Owner = секцРевизия) and МожноДобавлятьПозиции:--{ добавление позиции из строки таблицы
      Index = Cell.Frame;
      секцРевизия.InsertFrame(Index + 1);
      ВидФормы;--}
    elsif (Cell.Contents in ['-','x']) and (Cell.Owner = секцРевизия):--{ удаление строки
      Index = Cell.Frame;
      секцРевизия.DeleteFrame(Index);
    elsif (Cell.Contents = 'R') and (Cell.Owner = секцРевизия):
     if (Template.CurrentEdit  <> nil):
       Message(Template.CurrentEdit .Text + chr(13) +
               Template.CurrentEdit .SelText   + chr(13) +
               Str(Template.CurrentEdit .SelStart)  + chr(13) +
               Str(Template.CurrentEdit .SelLength));
     fi;
    fi;
  end;

  func Поле_ПриВходе(Cell: TemplateCell; Index: Integer; Action: Template.EnterTypes): Logical;
    var vClass: Class;
    if (Cell.Contents = 'ПолноеИмяКласса'):
      if (Action = Template.Clear):
        ПолноеИмяКласса = nil;
        ИмяПроектаКласса = nil;
      else
        if (ТипБазовогоКласса in [Константы.ТипБланк,Константы.ТипБланкРедактор]):
          if CmOk = ChooseClass(Kernel.BlankForm, vClass, ''):
            ПолноеИмяКласса = FullClassName(vClass);
            ИмяПроектаКласса = vClass.ClassProject;
            ТипБазовогоКласса = Библио.ТипТестируемогоКласса(vClass);
            Template.EndEdit(true);
          fi;
        elsif (ТипБазовогоКласса in [Константы.типКартотека]):
          if CmOk = ChooseClass(Kernel.CardForm, vClass, ''):
            ПолноеИмяКласса = FullClassName(vClass);
            ИмяПроектаКласса = vClass.ClassProject;
            Template.EndEdit(true);
          fi;
        elsif (ТипБазовогоКласса in [Константы.типОтчет]):
          if CmOk = ChooseClass(Kernel.ReportForm, vClass, ''):
            ПолноеИмяКласса = FullClassName(vClass);
            ИмяПроектаКласса = vClass.ClassProject;
            Template.EndEdit(true);
          fi;
        elsif (ТипБазовогоКласса  = nil):
          Message ('Пожалуйста, заполните сначала поле <Тип класса>!');
          Self.Template.CellByField['ТипБазовогоКласса'].SetFocus;
        fi;
      fi;
      ВидФормы;
    fi;
  end;

  func Поле_ПриОбзоре(Cell: TemplateCell; Value: Variant; var NewValue: Variant): Logical;
    var vClass: Class;
    if (Cell.Contents = 'ПолноеИмяКласса'):
      if (ТипБазовогоКласса in [Константы.ТипБланк,Константы.ТипБланкРедактор]):
        if CmOk = ChooseClass(Kernel.BlankForm, vClass, ''):
          NewValue = FullClassName(vClass);
          ИмяПроектаКласса = vClass.ClassProject;
          ТипБазовогоКласса = Библио.ТипТестируемогоКласса(vClass);
          Template.EndEdit(true);
        fi;
      elsif (ТипБазовогоКласса in [Константы.типКартотека]):
        if CmOk = ChooseClass(Kernel.CardForm, vClass, ''):
          NewValue = FullClassName(vClass);
          ИмяПроектаКласса = vClass.ClassProject;
          Template.EndEdit(true);
        fi;
      elsif (ТипБазовогоКласса in [Константы.типОтчет]):
        if CmOk = ChooseClass(Kernel.ReportForm, vClass, ''):
          NewValue = FullClassName(vClass);
          ИмяПроектаКласса = vClass.ClassProject;
          Template.EndEdit(true);
        fi;
      elsif (ТипБазовогоКласса  = nil):
        Message ('Пожалуйста, заполните сначала поле <Тип класса>!');
        Self.Template.CellByField['ТипБазовогоКласса'].SetFocus;
      fi;
    fi;
  end;

  func Поле_ПриПроверке (Cell: TemplateCell; Index: Integer; var Value: Variant): Logical;
    if (Cell.Contents = 'ПолноеИмяКласса'):
      if (Value = nil):
        Return true;
      else
        with Query.Create([Т9_Тесты.СпецификацияКласса]) do
          Filter = 'ExtId<>' + Record.ExtId + ' and ПолноеИмяКласса<>"' + Value + '"';
          if RecordsExists:
            Message('Для выбранного класса уже существует спецификация!');
            Return false;
          else
            Return true;
          fi;
        end;
      fi;
    fi;
  end;

--}}

--{{ Обработчики событий прочих объектов шаблона

  proc кнПриНажатии (Sender: Button);
    var TextBef, TextAft: String;
    var l: integer;
    if (Sender.Caption in ['b+','b-','i+','i-','&u+','u+','u-','r+','bl+','g+','gr+','color-']):
      if (Template.CurrentEdit <> nil):
        with (Template.CurrentEdit) do
          TextBef = SubStr(Text, 1, SelStart);
          l = SelLength;
          TextAft = SubStr(Text, (SelStart + l + 1), Length(Text));
          if (Sender.Caption = 'b+') and (l = 0):             Text = TextBef + '<b+>' + TextAft;
          elsif (Sender.Caption = 'b+') and (l > 0):          Text = TextBef + '<b+>' + SelText + '<b->' + TextAft;
          elsif (Sender.Caption = 'b-'):                      Text = TextBef + '<b->' + TextAft;
          elsif (Sender.Caption = 'i+') and (l = 0):          Text = TextBef + '<i+>' + TextAft;
          elsif (Sender.Caption = 'i+') and (l > 0):          Text = TextBef + '<i+>' + SelText + '<i->' + TextAft;
          elsif (Sender.Caption = 'i-'):                      Text = TextBef + '<i->' + TextAft;
          elsif (Sender.Caption in ['u+','&u+']) and (l = 0): Text = TextBef + '<u+>' + TextAft;
          elsif (Sender.Caption in ['u+','&u+']) and (l > 0): Text = TextBef + '<u+>' + SelText + '<u->' + TextAft;
          elsif (Sender.Caption = 'u-'):                      Text = TextBef + '<u->' + TextAft;
          elsif (Sender.Caption = 'r+') and (l = 0):          Text = TextBef + '<cf:Red>' + TextAft;
          elsif (Sender.Caption = 'r+') and (l > 0):          Text = TextBef + '<cf:Red>' + SelText + '<cf.>' + TextAft;
          elsif (Sender.Caption = 'bl+') and (l = 0):         Text = TextBef + '<cf:Blue>' + TextAft;
          elsif (Sender.Caption = 'bl+') and (l > 0):         Text = TextBef + '<cf:Blue>' + SelText + '<cf.>' + TextAft;
          elsif (Sender.Caption = 'g+') and (l = 0):          Text = TextBef + '<cf:Green>' + TextAft;
          elsif (Sender.Caption = 'g+') and (l > 0):          Text = TextBef + '<cf:Green>' + SelText + '<cf.>' + TextAft;
          elsif (Sender.Caption = 'gr+') and (l = 0):         Text = TextBef + '<cf:Gray>' + TextAft;
          elsif (Sender.Caption = 'gr+') and (l > 0):         Text = TextBef + '<cf:Gray>' + SelText + '<cf.>' + TextAft;
          elsif (Sender.Caption = 'color-'):                  Text = TextBef + '<cf.>' + TextAft;
          fi;
        end;
      fi;
    fi;
  end;
--}}

end