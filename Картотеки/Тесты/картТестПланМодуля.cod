--{{ Т9_Тесты - проект для тестирования проектов, созданных на платформе Т9 (c) ТБ.Бюджет, 2015

--Данный проект является свободным программным обеспечением. Вы вправе распространять его
--и/или модифицировать в соответствии с условиями версии 2.1 либо по вашему выбору с условиями
--более поздней версии Стандартной Общественной Лицензии Ограниченного Применения GNU,
--опубликованной Free Software Foundation.

--Мы распространяем этот проект в надежде на то, что он будет вам полезен, однако
--НЕ ПРЕДОСТАВЛЯЕМ НА НЕГО НИКАКИХ ГАРАНТИЙ, в том числе ГАРАНТИИ ТОВАРНОГО СОСТОЯНИЯ ПРИ ПРОДАЖЕ
--и ПРИГОДНОСТИ ДЛЯ ИСПОЛЬЗОВАНИЯ В КОНКРЕТНЫХ ЦЕЛЯХ. Для получения более подробной информации
--ознакомьтесь со Стандартной Общественной Лицензией Ограниченного Применений GNU.

--Вместе с данным проектом вы должны были получить экземпляр Стандартной Общественной Лицензии
--Ограниченного Применения GNU. Если вы его не получили, сообщите об этом в Software Foundation, Inc.,
--59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
--}

class inherited СИС2.картБазовая "Тест-планы модулей";

import СИС2 classes СтроковыеФункции;

inclass public

  stored var Условие_ТипТестПлана: Integer;
         var Условие_ИмяНаим: string;

inobject public

  var НеИзменятьПростойФильтр: logical;
  var обУсловие_ТипТестПлана: Integer;

inobject private

  var ркВсеТипы: RadioButton;
  var ркТипШаблон: RadioButton;
  var ркТипНеШаблон: RadioButton;
  var локУсловие_ТипТестПлана: Integer;

--{{ Вспомогательные методы

  --@doc Ф-я перекрывает СИС2
  func ПолучитьФильтрКартотеки(var locTreeFilter: string = nil): string;
    var locFltAnd: string[];
    var locFltOr: string[];
    var locName: string[];
    if (Условие_ТипТестПлана = 1):
      locFltAnd[1] = 'ЭтоШаблон';
    elsif (Условие_ТипТестПлана = 2):
      locFltAnd[1] = 'not ЭтоШаблон';
    fi;
    if (Условие_ИмяНаим <> nil):
      locFltOr[1] = 'Match(ПолноеИмяКласса,"*' + Условие_ИмяНаим + '*")';
      with Query.Create([Т9_Тесты.СпецификацияМодуля]) do
        Filter = 'Match(НаимКласса,"*' + Условие_ИмяНаим + '*")';
        Select;
        while not Eof do
          СИС2.Функции.AddInArray(locName, Current.ПолноеИмяКласса);
          Next;
        end;
      end;
      locFltOr[2] = 'ПолноеИмяКласса in ' + ToStr(locName);
      locFltAnd[2] = СложитьСтрокиФильтраПоИли(locFltOr);
    fi;
    Result = СложитьСтрокиФильтраПоИ(locFltAnd);
  end;


  --@doc Перемещает фокус на картотеку при непустом запросе картотеки
  --@doc в случае иерархической картотеки - при непустом содержимом текущей группы
  --@doc Метод переименован в целях избежания конфликтов с тестовым окружением
  proc ФокусНаКартотеку2;
    with Self.Query do
      if not (Bof and Eof):
        Window.CurrentObject = Window.Cardfile;
      fi;
    end;
  end;

  proc ВидШаблона;
    ркВсеТипы.Enabled = not НеИзменятьПростойФильтр;
    ркТипШаблон.Enabled = not НеИзменятьПростойФильтр;
    ркТипНеШаблон.Enabled = not НеИзменятьПростойФильтр;
  end;


--}}

--{{ Обработчики событий шаблона

  proc шаблон_ПриСоздании(Context :Variant);
    var locColumn: CardFileColumn;
    inherited шаблон_ПриСоздании(Context);
    locColumn = Self.CardFile.ColumnByField['ТипБазовогоКласса'];
    Библио.ОбновитьСписокКартПоля(locColumn, Константы.ТипыБазовыйхКлассов);
    locColumn.List.Add('Не определено|0');
  end;

  proc шаблон_ПриОткрытии(Create: Logical);
    if НеИзменятьПростойФильтр:
      локУсловие_ТипТестПлана = Условие_ТипТестПлана;
      Условие_ТипТестПлана = обУсловие_ТипТестПлана;
    fi;
    Запретить_Дублирование = true;
    inherited шаблон_ПриОткрытии(Create);
    ВидШаблона;
  end;

  func шаблон_ПередЗакрытием(ModalResult: Integer): Logical;
    Result = inherited шаблон_ПередЗакрытием(ModalResult);
    if НеИзменятьПростойФильтр:
      Условие_ТипТестПлана = локУсловие_ТипТестПлана;
    fi;
  end;
--}}

--{{ Обработчики событий клеток шаблона

  proc Поле_ПриВыходе(Cell: TemplateCell; Index: Integer);
    ОбновитьФильтр;
    ФокусНаКартотеку2;
  end;
--}}


--{{ Обработчики событий картотеки

  func картотека_ПриИзменении (Action: Cardfile.ModifyActions; locRecord: Record; locGroup: Record): Logical;
    if locRecord.ЭтоШаблон:
      Result = True;
    else
      if (locRecord.ТестПП.Count = 0):
        Result = True;
      else
        Message('Перед удалением тест-плана необходимо удалить все позиции :(');
      fi;
    fi;
  end;
--}}

--{{ Обработчики событий столбцов картотеки

  func КартПоле_ПриВыводе (Column: CardfileColumn; Rec: Record; Action: Template.OutputTypes; var Format: String): Variant;
    if Column.FieldName  = 'НаимКласса':
      if Rec.ЭтоШаблон:
        Result = '--';
      else
        Result = Библио.ОписаниеКлассаПоИмени(Rec.ПолноеИмяКласса);
      fi;
    elsif Column.FieldName in ['ИмяПроектаКласса', 'ПолноеИмяКласса']:
      Result = if(Rec.ЭтоШаблон, '--', Rec.GetField(Column.FieldName));
    elsif Column.FieldName  = 'КолШагов':
      Result = Rec.ТестПП.Count;
    fi;
  end;

  proc картПоле_ПриРисовании(Column: CardfileColumn; Rec: Record; Selected: Logical; var Color: Integer; Font: Font);
    if Rec.ЭтоШаблон:
      Font.Color = СИС2.Константы.clDkGray;
    fi;
  end;
--}}

--{{ Обработчики событий прочих объектов шаблона

  proc ркПриИзменении(Sender: RadioButton);
    ОбновитьФильтр;
    ФокусНаКартотеку2;
  end;
--}}

end